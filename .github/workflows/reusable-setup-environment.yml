name: Setup Environment (Reusable)

on:
  workflow_call:
    inputs:
      terraform_version:
        description: "Terraform version to use"
        required: false
        type: string
        default: "1.9.5"
      python_version:
        description: "Python version to use"
        required: false
        type: string
        default: "3.11"
      enable_terraform_cache:
        description: "Enable Terraform provider caching"
        required: false
        type: boolean
        default: true
      enable_python_cache:
        description: "Enable Python package caching"
        required: false
        type: boolean
        default: true
      cloud_provider:
        description: "Cloud provider (aws, azure, both)"
        required: false
        type: string
        default: "both"
    secrets:
      AWS_ROLE_ARN:
        description: "AWS IAM role ARN for OIDC authentication"
        required: false
      AZURE_CLIENT_ID:
        description: "Azure client ID for OIDC authentication"
        required: false
      AZURE_TENANT_ID:
        description: "Azure tenant ID for OIDC authentication"
        required: false
      AZURE_SUBSCRIPTION_ID:
        description: "Azure subscription ID for OIDC authentication"
        required: false
    outputs:
      terraform_cache_hit:
        description: "Whether Terraform cache was hit"
        value: ${{ jobs.setup.outputs.terraform_cache_hit }}
      python_cache_hit:
        description: "Whether Python cache was hit"
        value: ${{ jobs.setup.outputs.python_cache_hit }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      terraform_cache_hit: ${{ steps.terraform_cache.outputs.cache-hit }}
      python_cache_hit: ${{ steps.python_cache.outputs.cache-hit }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform Cache
        if: ${{ inputs.enable_terraform_cache }}
        id: terraform_cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            **/.terraform/providers
          key: terraform-${{ inputs.terraform_version }}-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ inputs.terraform_version }}-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Configure Terraform Plugin Cache
        if: ${{ inputs.enable_terraform_cache }}
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Setup Python Cache
        if: ${{ inputs.enable_python_cache }}
        id: python_cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: python-${{ inputs.python_version }}-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            python-${{ inputs.python_version }}-${{ runner.os }}-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install PyYAML requests

      - name: Cloud Login (AWS)
        if: ${{ (inputs.cloud_provider == 'aws' || inputs.cloud_provider == 'both') && secrets.AWS_ROLE_ARN }}
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1
          azure-client-id: ""
          azure-tenant-id: ""
          azure-subscription-id: ""

      - name: Cloud Login (Azure)
        if: ${{ (inputs.cloud_provider == 'azure' || inputs.cloud_provider == 'both') && secrets.AZURE_CLIENT_ID }}
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ""
          aws-region: ""
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Cloud Login (Both)
        if: ${{ inputs.cloud_provider == 'both' && secrets.AWS_ROLE_ARN && secrets.AZURE_CLIENT_ID }}
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Setup
        run: |
          echo "üîß Environment Setup Summary"
          echo "============================"
          echo "Terraform Version: $(terraform version -json | jq -r '.terraform_version')"
          echo "Python Version: $(python --version)"
          echo "Terraform Cache Hit: ${{ steps.terraform_cache.outputs.cache-hit || 'disabled' }}"
          echo "Python Cache Hit: ${{ steps.python_cache.outputs.cache-hit || 'disabled' }}"
          echo ""
          
          # Verify cloud authentication
          if command -v aws &> /dev/null; then
            echo "AWS CLI: $(aws --version)"
            if aws sts get-caller-identity &> /dev/null; then
              echo "‚úÖ AWS Authentication: Success"
            else
              echo "‚ùå AWS Authentication: Failed"
            fi
          fi
          
          if command -v az &> /dev/null; then
            echo "Azure CLI: $(az --version | head -n1)"
            if az account show &> /dev/null; then
              echo "‚úÖ Azure Authentication: Success"
            else
              echo "‚ùå Azure Authentication: Failed"
            fi
          fi
