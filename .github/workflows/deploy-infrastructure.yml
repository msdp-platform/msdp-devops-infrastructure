name: üöÄ Deploy Infrastructure - Smart Branch-Driven Deployment

on:
  push:
    branches: [dev, test, prod]
  pull_request:
    branches: [test, prod]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod
      components:
        description: "Components to deploy (comma-separated)"
        required: false
        default: "crossplane,argocd,backstage"
        type: string

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # Determine environment and deployment parameters
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      cluster_name: ${{ steps.env.outputs.cluster_name }}
      resource_group: ${{ steps.env.outputs.resource_group }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      components: ${{ steps.env.outputs.components }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          # Determine environment based on branch or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            COMPONENTS="${{ github.event.inputs.components }}"
          else
            case "${{ github.ref_name }}" in
              "dev")
                ENVIRONMENT="dev"
                ;;
              "test")
                ENVIRONMENT="test"
                ;;
              "prod")
                ENVIRONMENT="prod"
                ;;
              *)
                ENVIRONMENT="dev"
                ;;
            esac
            COMPONENTS="crossplane,argocd,backstage"
          fi

          # Set cluster and resource group names based on environment
            case "$ENVIRONMENT" in
              "dev")
                CLUSTER_NAME="msdp-infra-aks-dev"
                RESOURCE_GROUP="delivery-platform-aks-rg-dev"
                ;;
              "test")
                CLUSTER_NAME="msdp-infra-aks-test"
                RESOURCE_GROUP="delivery-platform-aks-rg-test"
                ;;
              "prod")
                CLUSTER_NAME="msdp-infra-aks-prod"
                RESOURCE_GROUP="delivery-platform-aks-rg-prod"
                ;;
            esac

          # Determine if we should deploy
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SHOULD_DEPLOY="false"
          else
            SHOULD_DEPLOY="true"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT

          echo "üéØ Environment: $ENVIRONMENT"
          echo "üèóÔ∏è Cluster: $CLUSTER_NAME"
          echo "üì¶ Resource Group: $RESOURCE_GROUP"
          echo "üöÄ Should Deploy: $SHOULD_DEPLOY"
          echo "üß© Components: $COMPONENTS"

  # Validate infrastructure configurations
  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate YAML files
        run: |
          echo "üîç Validating environment configuration..."
          yamllint infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml

          echo "üîç Validating component configurations..."
          find infrastructure/components -name "*.yaml" -exec yamllint {} \;

      - name: Validate Crossplane configurations
        if: contains(needs.determine-environment.outputs.components, 'crossplane')
        run: |
          echo "üîç Validating Crossplane XRDs..."
          find infrastructure/components/crossplane/xrds -name "*.yaml" -exec yamllint {} \;

          echo "üîç Validating Crossplane compositions..."
          find infrastructure/components/crossplane/compositions -name "*.yaml" -exec yamllint {} \;

      - name: Validate ArgoCD configurations
        if: contains(needs.determine-environment.outputs.components, 'argocd')
        run: |
          echo "üîç Validating ArgoCD applications..."
          find infrastructure/components/argocd -name "*.yaml" -exec yamllint {} \;

      - name: Validate Backstage configurations
        if: contains(needs.determine-environment.outputs.components, 'backstage')
        run: |
          echo "üîç Validating Backstage configurations..."
          find infrastructure/components/backstage -name "*.yaml" -exec yamllint {} \;

  # Setup Azure and Kubernetes environment
  setup-environment:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-infrastructure]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.determine-environment.outputs.resource_group }} \
            --name ${{ needs.determine-environment.outputs.cluster_name }} \
            --file $KUBECONFIG

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Install Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/release-2.0/install.sh | sh
          sudo mv crossplane /usr/local/bin/

  # Deploy Crossplane
  deploy-crossplane:
    runs-on: ubuntu-latest
    needs: [determine-environment, setup-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true' && contains(needs.determine-environment.outputs.components, 'crossplane')
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.determine-environment.outputs.resource_group }} \
            --name ${{ needs.determine-environment.outputs.cluster_name }} \
            --file $KUBECONFIG

      - name: Install Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/release-2.0/install.sh | sh
          sudo mv crossplane /usr/local/bin/

      - name: Deploy Crossplane
        run: |
          echo "üöÄ Deploying Crossplane to ${{ needs.determine-environment.outputs.environment }} environment..."

          # Create namespace if it doesn't exist
          kubectl create namespace crossplane-system --dry-run=client -o yaml | kubectl apply -f -

          # Install Crossplane using Helm
          helm repo add crossplane-stable https://charts.crossplane.io/stable
          helm repo update

          # Get Crossplane version from environment values
          CROSSPLANE_VERSION=$(yq eval '.crossplane.version' infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml)

          helm upgrade --install crossplane crossplane-stable/crossplane \
            --namespace crossplane-system \
            --version $CROSSPLANE_VERSION \
            --wait --timeout=10m

          echo "‚úÖ Crossplane deployed successfully"

      - name: Install Crossplane Providers
        run: |
          echo "üîß Installing Crossplane providers..."

          # Install Azure Provider
          AZURE_VERSION=$(yq eval '.crossplane.providers.azure.version' infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml)
          crossplane xpkg install provider xpkg.upbound.io/crossplane-contrib/provider-azure:$AZURE_VERSION

          # Install AWS Provider
          AWS_VERSION=$(yq eval '.crossplane.providers.aws.version' infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml)
          crossplane xpkg install provider xpkg.upbound.io/crossplane-contrib/provider-aws:$AWS_VERSION

          # Install GCP Provider
          GCP_VERSION=$(yq eval '.crossplane.providers.gcp.version' infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml)
          crossplane xpkg install provider xpkg.upbound.io/crossplane-contrib/provider-gcp:$GCP_VERSION

          echo "‚úÖ Crossplane providers installed successfully"

      - name: Deploy Crossplane Compositions
        run: |
          echo "üì¶ Deploying Crossplane compositions..."

          # Apply XRDs
          kubectl apply -f infrastructure/components/crossplane/xrds/

          # Apply compositions
          kubectl apply -f infrastructure/components/crossplane/compositions/

          echo "‚úÖ Crossplane compositions deployed successfully"

  # Deploy ArgoCD
  deploy-argocd:
    runs-on: ubuntu-latest
    needs: [determine-environment, setup-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true' && contains(needs.determine-environment.outputs.components, 'argocd')
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.determine-environment.outputs.resource_group }} \
            --name ${{ needs.determine-environment.outputs.cluster_name }} \
            --file $KUBECONFIG

      - name: Deploy ArgoCD
        run: |
          echo "üöÄ Deploying ArgoCD to ${{ needs.determine-environment.outputs.environment }} environment..."

          # Create namespace if it doesn't exist
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

          # Install ArgoCD
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          # Wait for ArgoCD to be ready
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

          echo "‚úÖ ArgoCD deployed successfully"

      - name: Deploy ArgoCD Applications
        run: |
          echo "üì¶ Deploying ArgoCD applications..."

          # Apply ArgoCD applications
          kubectl apply -f infrastructure/components/argocd/applications/

          echo "‚úÖ ArgoCD applications deployed successfully"

  # Deploy Backstage
  deploy-backstage:
    runs-on: ubuntu-latest
    needs: [determine-environment, setup-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true' && contains(needs.determine-environment.outputs.components, 'backstage')
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.determine-environment.outputs.resource_group }} \
            --name ${{ needs.determine-environment.outputs.cluster_name }} \
            --file $KUBECONFIG

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Deploy Backstage
        run: |
          echo "üöÄ Deploying Backstage to ${{ needs.determine-environment.outputs.environment }} environment..."

          # Create namespace if it doesn't exist
          kubectl create namespace backstage --dry-run=client -o yaml | kubectl apply -f -

          # Deploy Backstage using Helm
          helm upgrade --install backstage infrastructure/components/backstage/helm/ \
            --namespace backstage \
            --values infrastructure/environments/${{ needs.determine-environment.outputs.environment }}/values.yaml \
            --wait --timeout=10m

          echo "‚úÖ Backstage deployed successfully"

  # Verify deployment
  verify-deployment:
    runs-on: ubuntu-latest
    needs:
      [
        determine-environment,
        deploy-crossplane,
        deploy-argocd,
        deploy-backstage,
      ]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.determine-environment.outputs.resource_group }} \
            --name ${{ needs.determine-environment.outputs.cluster_name }} \
            --file $KUBECONFIG

      - name: Verify Crossplane
        if: contains(needs.determine-environment.outputs.components, 'crossplane')
        run: |
          echo "üîç Verifying Crossplane deployment..."
          kubectl get pods -n crossplane-system
          kubectl get providers
          echo "‚úÖ Crossplane verification completed"

      - name: Verify ArgoCD
        if: contains(needs.determine-environment.outputs.components, 'argocd')
        run: |
          echo "üîç Verifying ArgoCD deployment..."
          kubectl get pods -n argocd
          kubectl get applications -n argocd
          echo "‚úÖ ArgoCD verification completed"

      - name: Verify Backstage
        if: contains(needs.determine-environment.outputs.components, 'backstage')
        run: |
          echo "üîç Verifying Backstage deployment..."
          kubectl get pods -n backstage
          kubectl get services -n backstage
          echo "‚úÖ Backstage verification completed"

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment Summary for ${{ needs.determine-environment.outputs.environment }} environment:"
          echo "üèóÔ∏è Cluster: ${{ needs.determine-environment.outputs.cluster_name }}"
          echo "üì¶ Resource Group: ${{ needs.determine-environment.outputs.resource_group }}"
          echo "üß© Components Deployed: ${{ needs.determine-environment.outputs.components }}"
          echo "‚úÖ All components deployed successfully!"
