name: üöÄ Deploy via GitOps - Pipeline-Driven

on:
  push:
    branches: [dev, test, prod]
    paths:
      - "infrastructure/**"
      - ".github/workflows/deploy-gitops.yml"
  pull_request:
    branches: [test, prod]
    paths:
      - "infrastructure/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod
      force_sync:
        description: "Force ArgoCD sync"
        required: false
        default: false
        type: boolean

env:
  AZURE_CLIENT_ID: 129dd1fb-3d94-4e10-b451-2b0dea64daee
  AZURE_TENANT_ID: a4474822-c84f-4bd1-bc35-baed17234c9f
  AZURE_SUBSCRIPTION_ID: ecd977ed-b8df-4eb6-9cba-98397e1b2491
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_REGION: us-east-1

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      cluster_name: ${{ steps.detect.outputs.cluster_name }}
      resource_group: ${{ steps.detect.outputs.resource_group }}
      should_deploy: ${{ steps.detect.outputs.should_deploy }}
    steps:
      - name: Detect Environment
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              dev) ENVIRONMENT="dev" ;;
              test) ENVIRONMENT="test" ;;
              prod) ENVIRONMENT="prod" ;;
              *) ENVIRONMENT="dev" ;;
            esac
          fi

          case "$ENVIRONMENT" in
            dev)
              CLUSTER_NAME="msdp-infra-aks"
              RESOURCE_GROUP="delivery-platform-aks-rg"
              ;;
            test)
              CLUSTER_NAME="msdp-infra-aks-test"
              RESOURCE_GROUP="delivery-platform-aks-rg-test"
              ;;
            prod)
              CLUSTER_NAME="msdp-infra-aks-prod"
              RESOURCE_GROUP="delivery-platform-aks-rg-prod"
              ;;
          esac

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  deploy-via-gitops:
    needs: detect-environment
    if: needs.detect-environment.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.detect-environment.outputs.resource_group }} \
            --name ${{ needs.detect-environment.outputs.cluster_name }} \
            --overwrite-existing

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ArgoCD Applications
        run: |
          echo "üöÄ Deploying ArgoCD Applications for GitOps management"

          # Deploy ArgoCD applications that will manage everything
          kubectl apply -k infrastructure/applications/argocd/applications/

          # Wait for ArgoCD to be ready
          echo "‚è≥ Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

          echo "‚úÖ ArgoCD Applications deployed"

      - name: Force ArgoCD Sync (if requested)
        if: github.event.inputs.force_sync == 'true'
        run: |
          echo "üîÑ Force syncing ArgoCD applications..."

          # Sync platform components
          kubectl patch application msdp-platform-components -n argocd --type merge -p '{"operation":{"sync":{"syncOptions":["CreateNamespace=true"]}}}'

          # Sync applications
          kubectl patch application msdp-applications -n argocd --type merge -p '{"operation":{"sync":{"syncOptions":["CreateNamespace=true"]}}}'

          echo "‚úÖ Force sync completed"

      - name: Monitor ArgoCD Sync
        run: |
          echo "üëÄ Monitoring ArgoCD sync status..."

          # Wait for applications to sync
          kubectl wait --for=condition=Synced application/msdp-platform-components -n argocd --timeout=600s || true
          kubectl wait --for=condition=Synced application/msdp-applications -n argocd --timeout=600s || true

          # Show application status
          kubectl get applications -n argocd

          echo "‚úÖ ArgoCD sync monitoring completed"

      - name: Verify GitOps Deployment
        run: |
          echo "üîç Verifying GitOps deployment..."

          # Check all namespaces and pods
          kubectl get namespaces | grep -E "(argocd|backstage|crossplane|monitoring|ingress-nginx|cert-manager|external-dns)"

          # Check platform components
          echo "üìä Platform Components:"
          kubectl get pods -n ingress-nginx
          kubectl get pods -n cert-manager
          kubectl get pods -n external-dns
          kubectl get pods -n monitoring

          # Check applications
          echo "üöÄ Applications:"
          kubectl get pods -n argocd
          kubectl get pods -n backstage
          kubectl get pods -n crossplane-system

          # Check ingress and certificates
          echo "üåê Ingress and Certificates:"
          kubectl get ingress -A
          kubectl get certificates -A

          echo "‚úÖ GitOps deployment verification completed"

      - name: Test Application Access
        run: |
          echo "üåê Testing application access via GitOps deployment..."

          # Get ingress IP
          INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Ingress IP: $INGRESS_IP"

          # Test ArgoCD access
          if curl -I -s --max-time 10 "https://argocd.${{ needs.detect-environment.outputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ ArgoCD is accessible via GitOps"
          else
            echo "‚ùå ArgoCD access failed"
          fi

          # Test Grafana access
          if curl -I -s --max-time 10 "https://grafana.${{ needs.detect-environment.outputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ Grafana is accessible via GitOps"
          else
            echo "‚ùå Grafana access failed"
          fi

          # Test Backstage access
          if curl -I -s --max-time 10 "https://backstage.${{ needs.detect-environment.outputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ Backstage is accessible via GitOps"
          else
            echo "‚ùå Backstage access failed"
          fi

          echo "‚úÖ Application access testing completed"
