name: "AKS Deploy"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stg
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      kubernetes_version:
        description: 'Kubernetes version (leave empty for latest stable)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  aks:
    name: "Deploy AKS ‚Äî ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Cloud Login (AWS + Azure)
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Terraform backend
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: ${{ inputs.environment }}
          cloud: aws
          cloud-segment: azure
          app: aks
          function: tfstate
          key-salt: infrastructure/environment/${{ inputs.environment }}/azure/aks
          aws-region: eu-west-1
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          use-shared-lock-table: "true"
          lock-table-name: tfstate-locks-${{ secrets.AWS_ACCOUNT_ID }}-euw1

      - name: Terraform Init
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/${{ inputs.environment }}/azure/aks
          backend-config-file: infrastructure/environment/${{ inputs.environment }}/backend/backend-config.json

      - name: Terraform Format Check
        run: |
          cd infrastructure/environment/${{ inputs.environment }}/azure/aks
          terraform fmt -check -recursive
          if [ $? -ne 0 ]; then
            echo "‚ùå Terraform files are not properly formatted"
            echo "Run 'terraform fmt -recursive' to fix formatting issues"
            terraform fmt -recursive -diff
            exit 1
          fi
          echo "‚úÖ Terraform formatting check passed"

      - name: Terraform Validate
        run: |
          cd infrastructure/environment/${{ inputs.environment }}/azure/aks
          terraform validate
          echo "‚úÖ Terraform validation passed"

      - name: Terraform Plan
        run: |
          cd infrastructure/environment/${{ inputs.environment }}/azure/aks
          
          # Build terraform plan command
          PLAN_CMD="terraform plan -no-color -out=tfplan"
          
          # Add kubernetes version if provided
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            PLAN_CMD="$PLAN_CMD -var='k8s_version=${{ inputs.kubernetes_version }}'"
            echo "üîß Using specified Kubernetes version: ${{ inputs.kubernetes_version }}"
          else
            echo "üîÑ Using latest stable Kubernetes version (auto-detected)"
          fi
          
          # Execute plan
          echo "üìã Running Terraform plan..."
          eval $PLAN_CMD
          
          # Show plan summary
          echo "üìä Plan Summary:"
          terraform show -no-color tfplan | grep -E "(Plan:|No changes|will be created|will be updated|will be destroyed)" || true

      - name: Terraform Apply
        if: ${{ inputs.action == 'apply' }}
        run: |
          cd infrastructure/environment/${{ inputs.environment }}/azure/aks
          
          # Build terraform apply command
          APPLY_CMD="terraform apply -no-color tfplan"
          
          # Add kubernetes version if provided
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            APPLY_CMD="terraform apply -no-color -var='k8s_version=${{ inputs.kubernetes_version }}' -auto-approve"
            echo "üîß Using specified Kubernetes version: ${{ inputs.kubernetes_version }}"
          else
            echo "üîÑ Using latest stable Kubernetes version (auto-detected)"
          fi
          
          # Execute apply
          echo "üöÄ Running Terraform apply..."
          eval $APPLY_CMD
          
          # Show outputs
          echo "üì§ AKS Cluster Outputs:"
          terraform output -json | jq -r 'to_entries[] | "\(.key): \(.value.value)"' || true

      - name: Verify AKS Cluster
        if: ${{ inputs.action == 'apply' }}
        run: |
          cd infrastructure/environment/${{ inputs.environment }}/azure/aks
          
          # Get cluster info from Terraform outputs
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          RESOURCE_GROUP=$(terraform output -raw resource_group_name || echo "rg-aks-${{ inputs.environment }}")
          K8S_VERSION=$(terraform output -raw kubernetes_version)
          OIDC_ISSUER=$(terraform output -raw oidc_issuer_url)
          
          echo "üîç Verifying AKS cluster deployment..."
          echo "Cluster Name: $CLUSTER_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Kubernetes Version: $K8S_VERSION"
          echo "OIDC Issuer: $OIDC_ISSUER"
          
          # Verify cluster exists and is running
          az aks show --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" --query '{name:name,provisioningState:provisioningState,kubernetesVersion:kubernetesVersion,powerState:powerState.code}' --output table
          
          # Check node pools
          echo "üìä Node Pools:"
          az aks nodepool list --resource-group "$RESOURCE_GROUP" --cluster-name "$CLUSTER_NAME" --query '[].{name:name,count:count,vmSize:vmSize,provisioningState:provisioningState}' --output table
          
          echo "‚úÖ AKS cluster verification completed"

      - name: Upload Terraform Plan
        if: ${{ inputs.action == 'plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.environment }}
          path: infrastructure/environment/${{ inputs.environment }}/azure/aks/tfplan
          retention-days: 7

      - name: Summary
        run: |
          echo "## üéØ AKS Deployment Summary"
          echo ""
          echo "**Environment:** ${{ inputs.environment }}"
          echo "**Action:** ${{ inputs.action }}"
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            echo "**Kubernetes Version:** ${{ inputs.kubernetes_version }}"
          else
            echo "**Kubernetes Version:** Latest stable (auto-detected)"
          fi
          echo ""
          if [ "${{ inputs.action }}" == "plan" ]; then
            echo "üìã **Plan completed successfully**"
            echo "- Review the plan output above"
            echo "- Use 'apply' action to deploy the changes"
            echo "- Plan artifact uploaded for review"
          else
            echo "üöÄ **Apply completed successfully**"
            echo "- AKS cluster has been deployed/updated"
            echo "- Check the verification output above"
            echo "- Use 'az aks get-credentials' to connect to the cluster"
          fi
