name: üöÄ Simple Configuration-Driven Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod
      component:
        description: "Component to deploy"
        required: true
        type: choice
        options:
          - nginx_ingress
          - cert_manager
          - grafana
          - prometheus
          - argocd
          - crossplane
          - backstage
      dry_run:
        description: "Perform dry run"
        required: false
        default: true
        type: boolean

env:
  AZURE_CLIENT_ID: 129dd1fb-3d94-4e10-b451-2b0dea64daee
  AZURE_TENANT_ID: a4474822-c84f-4bd1-bc35-baed17234c9f
  AZURE_SUBSCRIPTION_ID: ecd977ed-b8df-4eb6-9cba-98397e1b2491

jobs:
  deploy-component:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          azure_client_id: ${{ env.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ env.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          environment: ${{ github.event.inputs.environment }}

      - name: Debug Environment
        run: |
          echo "üîç Debug information:"
          echo "KUBECONFIG: $KUBECONFIG"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Component: ${{ github.event.inputs.component }}"
          
          # Test kubectl connection
          kubectl cluster-info --request-timeout=10s || echo "‚ö†Ô∏è kubectl connection failed"

      - name: Load Component Configuration
        id: config
        run: |
          echo "üîß Loading configuration for ${{ github.event.inputs.component }}..."
          
          COMPONENT="${{ github.event.inputs.component }}"
          
          # Check if component exists in registry
          COMPONENT_EXISTS=$(yq eval ".components.$COMPONENT" .github/components.yml)
          if [ "$COMPONENT_EXISTS" = "null" ]; then
            echo "‚ùå Component $COMPONENT not found in registry"
            exit 1
          fi
          
          # Get component details
          COMPONENT_TYPE=$(yq eval ".components.$COMPONENT.type" .github/components.yml)
          COMPONENT_NAMESPACE=$(yq eval ".components.$COMPONENT.namespace" .github/components.yml)
          COMPONENT_CATEGORY=$(yq eval ".components.$COMPONENT.category" .github/components.yml)
          
          echo "component_type=$COMPONENT_TYPE" >> $GITHUB_OUTPUT
          echo "namespace=$COMPONENT_NAMESPACE" >> $GITHUB_OUTPUT
          echo "category=$COMPONENT_CATEGORY" >> $GITHUB_OUTPUT
          
          echo "üìã Component: $COMPONENT"
          echo "üìã Type: $COMPONENT_TYPE"
          echo "üìã Namespace: $COMPONENT_NAMESPACE"
          echo "üìã Category: $COMPONENT_CATEGORY"

      - name: Deploy Helm Component
        if: steps.config.outputs.component_type == 'helm'
        run: |
          echo "üöÄ Deploying Helm component: ${{ github.event.inputs.component }}"
          
          COMPONENT="${{ github.event.inputs.component }}"
          ENV="${{ github.event.inputs.environment }}"
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          
          # Get Helm chart details from registry
          CHART=$(yq eval ".components.$COMPONENT.chart" .github/components.yml)
          REPOSITORY=$(yq eval ".components.$COMPONENT.repository" .github/components.yml)
          CHART_VERSION=$(yq eval ".components.$COMPONENT.chart_version" .github/components.yml)
          
          echo "üì¶ Chart: $CHART"
          echo "üì¶ Repository: $REPOSITORY"
          echo "üì¶ Version: $CHART_VERSION"
          
          # Add Helm repository
          REPO_NAME="${COMPONENT}-repo"
          helm repo add "$REPO_NAME" "$REPOSITORY"
          helm repo update
          
          # Create namespace
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          
          # Create component-specific secrets
          case "$COMPONENT" in
            "grafana")
              if ! kubectl get secret grafana-admin-secret -n "$NAMESPACE" >/dev/null 2>&1; then
                kubectl create secret generic grafana-admin-secret \
                  --namespace="$NAMESPACE" \
                  --from-literal=admin-user=admin \
                  --from-literal=admin-password="$(openssl rand -base64 32)"
                echo "‚úÖ Created grafana-admin-secret"
              fi
              ;;
          esac
          
          # Generate values file from config
          VALUES_FILE="/tmp/${COMPONENT}-values.yaml"
          
          # Start with global component config
          yq eval ".platform_components.$COMPONENT // .applications.$COMPONENT" infrastructure/config/global.yaml > "$VALUES_FILE"
          
          # Add environment-specific domain
          DOMAIN_BASE=$(yq eval '.domains.base' infrastructure/config/global.yaml)
          DOMAIN="${ENV}.${DOMAIN_BASE}"
          
          # Configure ingress based on component
          case "$COMPONENT" in
            "grafana")
              yq eval ".ingress.enabled = true" -i "$VALUES_FILE"
              yq eval ".ingress.hosts[0] = \"grafana.$DOMAIN\"" -i "$VALUES_FILE"
              yq eval ".persistence.enabled = false" -i "$VALUES_FILE"  # Dev setting
              ;;
            "argocd")
              yq eval ".server.ingress.enabled = true" -i "$VALUES_FILE"
              yq eval ".server.ingress.hosts[0] = \"argocd.$DOMAIN\"" -i "$VALUES_FILE"
              ;;
            "prometheus")
              yq eval ".prometheus.ingress.enabled = true" -i "$VALUES_FILE"
              yq eval ".prometheus.ingress.hosts[0] = \"prometheus.$DOMAIN\"" -i "$VALUES_FILE"
              ;;
          esac
          
          echo "üìù Generated values file:"
          head -10 "$VALUES_FILE"
          
          # Deploy with Helm
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç DRY RUN MODE"
            helm install "$COMPONENT" "$REPO_NAME/$CHART" \
              --namespace "$NAMESPACE" \
              --version "$CHART_VERSION" \
              --values "$VALUES_FILE" \
              --dry-run --debug
          else
            helm upgrade --install "$COMPONENT" "$REPO_NAME/$CHART" \
              --namespace "$NAMESPACE" \
              --version "$CHART_VERSION" \
              --values "$VALUES_FILE" \
              --wait --timeout=10m \
              --create-namespace
            
            echo "‚úÖ Successfully deployed $COMPONENT"
          fi

      - name: Deploy YAML Component
        if: steps.config.outputs.component_type == 'yaml'
        run: |
          echo "üöÄ Deploying YAML component: ${{ github.event.inputs.component }}"
          
          COMPONENT="${{ github.event.inputs.component }}"
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          
          # Get component path from registry
          COMPONENT_PATH=$(yq eval ".components.$COMPONENT.path" .github/components.yml)
          
          echo "üìÅ Path: $COMPONENT_PATH"
          
          # Create namespace
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy using kustomize or direct YAML
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç DRY RUN MODE"
            if [ -f "$COMPONENT_PATH/kustomization.yaml" ]; then
              kubectl kustomize "$COMPONENT_PATH" | kubectl apply --dry-run=client -f -
            else
              kubectl apply --dry-run=client -f "$COMPONENT_PATH/"
            fi
          else
            if [ -f "$COMPONENT_PATH/kustomization.yaml" ]; then
              kubectl apply -k "$COMPONENT_PATH"
            else
              kubectl apply -f "$COMPONENT_PATH/"
            fi
            
            echo "‚úÖ Successfully deployed $COMPONENT"
          fi

      - name: Verify Deployment
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üîç Verifying deployment..."
          
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          
          # Check deployment status
          echo "üìä Namespace: $NAMESPACE"
          kubectl get all -n "$NAMESPACE" || echo "‚ÑπÔ∏è No resources found yet"
          
          # Check ingress
          kubectl get ingress -n "$NAMESPACE" || echo "‚ÑπÔ∏è No ingress found"
          
          echo "‚úÖ Verification completed"
