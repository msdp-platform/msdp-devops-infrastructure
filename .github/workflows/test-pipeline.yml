name: üß™ Test Pipeline - Verify Current State

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to test"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_REGION: us-east-1

jobs:
  test-current-state:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          case "${{ github.event.inputs.environment }}" in
            dev)
              CLUSTER_NAME="msdp-infra-aks"
              RESOURCE_GROUP="delivery-platform-aks-rg"
              ;;
            test)
              CLUSTER_NAME="msdp-infra-aks-test"
              RESOURCE_GROUP="delivery-platform-aks-rg-test"
              ;;
            prod)
              CLUSTER_NAME="msdp-infra-aks-prod"
              RESOURCE_GROUP="delivery-platform-aks-rg-prod"
              ;;
          esac

          az aks get-credentials \
            --resource-group $RESOURCE_GROUP \
            --name $CLUSTER_NAME \
            --overwrite-existing

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test Current Infrastructure State
        run: |
          echo "üîç Testing current infrastructure state..."

          # Check all namespaces
          echo "üìÅ Namespaces:"
          kubectl get namespaces | grep -E "(argocd|backstage|crossplane|monitoring|ingress-nginx|cert-manager|external-dns)"

          # Check platform components
          echo "üìä Platform Components Status:"
          kubectl get pods -n ingress-nginx
          kubectl get pods -n cert-manager
          kubectl get pods -n external-dns
          kubectl get pods -n monitoring

          # Check applications
          echo "üöÄ Applications Status:"
          kubectl get pods -n argocd
          kubectl get pods -n backstage
          kubectl get pods -n crossplane-system

          # Check ArgoCD applications
          echo "üîÑ ArgoCD Applications:"
          kubectl get applications -n argocd

          # Check secrets
          echo "üîê AWS Credentials Secret:"
          kubectl get secret aws-credentials -n external-dns -o yaml | grep -E "(aws-access-key-id|aws-secret-access-key)" | head -2

          # Check ingress and certificates
          echo "üåê Ingress and Certificates:"
          kubectl get ingress -A
          kubectl get certificates -A

          echo "‚úÖ Current state verification completed"

      - name: Test Application Access
        run: |
          echo "üåê Testing application access..."

          # Get ingress IP
          INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Ingress IP: $INGRESS_IP"

          # Test ArgoCD access
          if curl -I -s --max-time 10 "https://argocd.${{ github.event.inputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ ArgoCD is accessible"
          else
            echo "‚ùå ArgoCD access failed"
          fi

          # Test Grafana access
          if curl -I -s --max-time 10 "https://grafana.${{ github.event.inputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ Grafana is accessible"
          else
            echo "‚ùå Grafana access failed"
          fi

          # Test Backstage access
          if curl -I -s --max-time 10 "https://backstage.${{ github.event.inputs.environment }}.aztech-msdp.com" | grep -q "200\|302"; then
            echo "‚úÖ Backstage is accessible"
          else
            echo "‚ùå Backstage access failed"
          fi

          echo "‚úÖ Application access testing completed"
