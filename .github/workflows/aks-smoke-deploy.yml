name: aks-smoke-deploy

on:
  workflow_call:
    inputs:
      cluster_name:
        description: "AKS cluster name"
        required: true
        type: string
      resource_group:
        description: "Azure Resource Group for the AKS cluster (optional; discovery used if omitted)"
        required: false
        default: ""
        type: string
      environment:
        description: "Optional environment hint for discovery (e.g., dev/test/prod)"
        required: false
        default: ""
        type: string
      image:
        description: "Full image reference to run (e.g., ghcr.io/org/app:tag or <acr>.azurecr.io/repo:tag)"
        required: true
        type: string
      namespace:
        description: "Namespace to run the job in"
        required: false
        default: smoke-test
        type: string
      admin:
        description: "Use AKS --admin (cluster-admin) context"
        required: false
        default: false
        type: boolean
      cleanup:
        description: "Delete the Job after running"
        required: false
        default: true
        type: boolean
    secrets:
      AZURE_CLIENT_ID:
        description: "Azure Client ID for OIDC login"
        required: true
      AZURE_TENANT_ID:
        description: "Azure Tenant ID"
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: "Azure Subscription ID"
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      JOB_NAME: smoke-job
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cloud Login (Azure OIDC)
        uses: ./.github/actions/cloud-login
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Kubernetes setup (AKS)
        id: k8s
        uses: ./.github/actions/kubernetes-setup
        with:
          provider: aks
          cluster-name: ${{ inputs.cluster_name }}
          environment: ${{ inputs.environment }}
          azure-resource-group: ${{ inputs.resource_group }}
          azure-admin: ${{ inputs.admin }}
          namespace: ${{ inputs.namespace }}
          validate: 'true'

      - name: Render Job manifest
        id: render
        shell: bash
        env:
          MANIFEST: ${{ runner.temp }}/smoke-job.yaml
        run: |
          set -euo pipefail
          cat > "$MANIFEST" <<YAML
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${JOB_NAME}
            namespace: ${NAMESPACE:-${{ inputs.namespace }}}
          spec:
            backoffLimit: 0
            template:
              metadata:
                labels:
                  app: ${JOB_NAME}
              spec:
                restartPolicy: Never
                containers:
                  - name: runner
                    image: "${{ inputs.image }}"
                    command: ["sh","-c"]
                    args: ["echo aks-smoke-ok && sleep 1"]
          YAML
          echo "manifest=$MANIFEST" >> "$GITHUB_OUTPUT"

      - name: Apply Job
        shell: bash
        env:
          KUBECONFIG: ${{ steps.k8s.outputs.kubeconfig-path }}
        run: |
          set -euo pipefail
          kubectl apply -f "${{ steps.render.outputs.manifest }}"
          kubectl get job "${JOB_NAME}" -n "${{ inputs.namespace }}" -o yaml | sed -n '1,120p'

      - name: Wait for completion
        shell: bash
        env:
          KUBECONFIG: ${{ steps.k8s.outputs.kubeconfig-path }}
        run: |
          set -euo pipefail
          kubectl wait --for=condition=complete job/${JOB_NAME} -n "${{ inputs.namespace }}" --timeout=180s

      - name: Capture logs
        id: logs
        shell: bash
        env:
          KUBECONFIG: ${{ steps.k8s.outputs.kubeconfig-path }}
        run: |
          set -euo pipefail
          POD=$(kubectl get pods -n "${{ inputs.namespace }}" -l job-name=${JOB_NAME} -o jsonpath='{.items[0].metadata.name}')
          mkdir -p "$RUNNER_TEMP/aks-smoke-logs"
          kubectl logs -n "${{ inputs.namespace }}" "$POD" | tee "$RUNNER_TEMP/aks-smoke-logs/pod.log"
          echo "pod_name=$POD" >> "$GITHUB_OUTPUT"
          echo "logs_dir=$RUNNER_TEMP/aks-smoke-logs" >> "$GITHUB_OUTPUT"

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: aks-smoke-${{ github.run_id }}
          path: ${{ steps.logs.outputs.logs_dir }}

      - name: Cleanup Job (optional)
        if: ${{ inputs.cleanup }}
        shell: bash
        env:
          KUBECONFIG: ${{ steps.k8s.outputs.kubeconfig-path }}
        run: |
          set -euo pipefail
          kubectl delete job/${JOB_NAME} -n "${{ inputs.namespace }}" --ignore-not-found=true

