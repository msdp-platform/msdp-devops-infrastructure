name: OIDC Validation (Readiness Only)

on:
  push:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to validate"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stg
          - prod

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AWS_REGION: eu-west-1

permissions:
  contents: read
  id-token: write

jobs:
  validate-oidc-readiness:
    name: Validate OIDC and Backend Readiness
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cloud Login (AWS + Azure OIDC)
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          azure-client-id: ${{ env.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ env.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Generate Terraform Backend Configuration
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: ${{ github.event.inputs.environment || 'dev' }}
          cloud: aws
          app: eks
          function: tfstate
          key-salt: infrastructure/environment/dev/aws/eks
          aws-region: ${{ env.AWS_REGION }}
          use-shared-lock-table: "true"

      - name: Read Backend Configuration
        id: backend
        shell: bash
        run: |
          CFG_FILE="infrastructure/environment/dev/backend/backend-config.json"
          echo "::notice::Reading backend configuration from: $CFG_FILE"

          if [ ! -f "$CFG_FILE" ]; then
            echo "::error::Backend configuration file not found: $CFG_FILE"
            exit 1
          fi

          # Extract values from the generated CFG file (single source of truth)
          BUCKET=$(jq -r '.bucket' "$CFG_FILE")
          REGION=$(jq -r '.region' "$CFG_FILE")
          DDB=$(jq -r '.dynamodb_table' "$CFG_FILE")
          KEY=$(jq -r '.key' "$CFG_FILE")

          echo "BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "REGION=$REGION" >> $GITHUB_OUTPUT
          echo "DDB=$DDB" >> $GITHUB_OUTPUT
          echo "KEY=$KEY" >> $GITHUB_OUTPUT

          echo "::notice::Backend Configuration (from CFG file):"
          echo "  Bucket: $BUCKET"
          echo "  Region: $REGION"
          echo "  DynamoDB: $DDB"
          echo "  Key: $KEY"

          echo "::notice::Full CFG contents:"
          cat "$CFG_FILE"

      - name: Validate AWS S3 Bucket Access
        shell: bash
        run: |
          echo "::notice::Validating S3 bucket access..."
          aws s3api head-bucket --bucket "${{ steps.backend.outputs.BUCKET }}" --region "${{ steps.backend.outputs.REGION }}"
          echo "::notice::✅ S3 bucket '${{ steps.backend.outputs.BUCKET }}' is accessible"

      - name: Validate AWS DynamoDB Table Access
        shell: bash
        run: |
          echo "::notice::Validating DynamoDB table access..."
          aws dynamodb describe-table --table-name "${{ steps.backend.outputs.DDB }}" --region "${{ steps.backend.outputs.REGION }}" --query 'Table.{TableName:TableName,TableStatus:TableStatus}' --output table
          echo "::notice::✅ DynamoDB table '${{ steps.backend.outputs.DDB }}' is accessible"

      - name: Validation Summary
        shell: bash
        run: |
          echo "::notice::=========================================="
          echo "::notice::OIDC VALIDATION COMPLETE - READINESS ONLY"
          echo "::notice::=========================================="
          echo "::notice::✅ AWS OIDC Authentication: OK"
          echo "::notice::✅ Azure OIDC Authentication: OK"
          echo "::notice::✅ S3 Bucket Access: OK"
          echo "::notice::✅ DynamoDB Table Access: OK"
          echo "::notice::=========================================="
          echo "::notice::Backend Configuration Source: infrastructure/environment/dev/backend/backend-config.json"
          echo "::notice::Key printed but not used for terraform operations"
          echo "::notice::Validation is readiness-only; refusing to run terraform in this workflow."
          echo "::notice::=========================================="

      - name: Guard Against Terraform Execution
        shell: bash
        run: |
          echo "::notice::=========================================="
          echo "::notice::GUARD: VALIDATION IS READINESS-ONLY"
          echo "::notice::=========================================="
          echo "::notice::This workflow validates OIDC authentication and backend primitives only."
          echo "::notice::No terraform init/plan/apply operations are performed in this workflow."
          echo "::notice::Single source of truth: backend-config.json generated by terraform-backend action"
          echo "::notice::No re-reading of YAML config files beyond initial CFG generation"
          echo "::notice::=========================================="
