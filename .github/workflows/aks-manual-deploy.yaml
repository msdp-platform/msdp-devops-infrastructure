on:
jobs:
        with:
          repo-shortname: infra
          project: msdp
          env: ${{ inputs.env }}
          cloud: aws
          cloud-segment: azure
          app: aks
          function: tfstate
          key-salt: infrastructure/environment/${{ inputs.env }}/azure/aks
          aws-region: eu-west-1
          use-shared-lock-table: "true"

      - name: Show resolved AWS account id
        run: echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"

      - name: Terraform Init
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/${{ inputs.env }}/azure/aks
          backend-config-file: infrastructure/environment/${{ inputs.env }}/backend/backend-config.json

      - name: Terraform Format & Validate (Python)
        uses: ./.github/actions/terraform-checks
        with:
          working-directory: infrastructure/environment/${{ inputs.env }}/azure/aks

      - name: Terraform Plan
        run: |
          cd infrastructure/environment/${{ inputs.env }}/azure/aks

          # Build terraform plan command
          PLAN_CMD="terraform plan -no-color -out=tfplan"

          # Add kubernetes version if provided
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            PLAN_CMD="$PLAN_CMD -var='k8s_version=${{ inputs.kubernetes_version }}'"
            echo "🔧 Using specified Kubernetes version: ${{ inputs.kubernetes_version }}"
          else
            echo "🔄 Using latest stable Kubernetes version (auto-detected)"
          fi

          # Execute plan
          echo "📋 Running Terraform plan..."
          eval $PLAN_CMD

          # Show plan summary
          echo "📊 Plan Summary:"
          terraform show -no-color tfplan | grep -E "(Plan:|No changes|will be created|will be updated|will be destroyed)" || true

      - name: Terraform Apply
        if: "${{ inputs.action == 'apply' }}"
        run: |
          cd infrastructure/environment/${{ inputs.env }}/azure/aks

          # Build terraform apply command
          APPLY_CMD="terraform apply -no-color tfplan"

          # Add kubernetes version if provided
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            APPLY_CMD="terraform apply -no-color -var='k8s_version=${{ inputs.kubernetes_version }}' -auto-approve"
            echo "🔧 Using specified Kubernetes version: ${{ inputs.kubernetes_version }}"
          else
            echo "🔄 Using latest stable Kubernetes version (auto-detected)"
          fi

          # Execute apply
          echo "🚀 Running Terraform apply..."
          eval $APPLY_CMD

          # Show outputs
          echo "📤 AKS Cluster Outputs:"
          terraform output -json | jq -r 'to_entries[] | "\(.key): \(.value.value)"' || true

      - name: Verify AKS Cluster
        if: "${{ inputs.action == 'apply' }}"
        run: |
          cd infrastructure/environment/${{ inputs.env }}/azure/aks

          # Get cluster info from Terraform outputs
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          RESOURCE_GROUP=$(terraform output -raw resource_group_name || echo "rg-aks-${{ inputs.env }}")
          K8S_VERSION=$(terraform output -raw kubernetes_version)
          OIDC_ISSUER=$(terraform output -raw oidc_issuer_url)

          echo "🔍 Verifying AKS cluster deployment..."
          echo "Cluster Name: $CLUSTER_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Kubernetes Version: $K8S_VERSION"
          echo "OIDC Issuer: $OIDC_ISSUER"

          # Verify cluster exists and is running
          az aks show --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" --query '{name:name,provisioningState:provisioningState,kubernetesVersion:kubernetesVersion,powerState:powerState.code}' --output table

          # Check node pools
          echo "📊 Node Pools:"
          az aks nodepool list --resource-group "$RESOURCE_GROUP" --cluster-name "$CLUSTER_NAME" --query '[].{name:name,count:count,vmSize:vmSize,provisioningState:provisioningState}' --output table

          echo "✅ AKS cluster verification completed"

      - name: Upload Terraform Plan
        if: "${{ inputs.action == 'plan' }}"
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.env }}
          path: infrastructure/environment/${{ inputs.env }}/azure/aks/tfplan
          retention-days: 7

      - name: Summary
        run: |
          echo "## 🎯 AKS Deployment Summary"
          echo ""
          echo "**Environment:** ${{ inputs.env }}"
          echo "**Action:** ${{ inputs.action }}"
          if [ -n "${{ inputs.kubernetes_version }}" ]; then
            echo "**Kubernetes Version:** ${{ inputs.kubernetes_version }}"
          else
            echo "**Kubernetes Version:** Latest stable (auto-detected)"
          fi
          echo ""
          if [ "${{ inputs.action }}" == "plan" ]; then
            echo "📋 **Plan completed successfully**"
            echo "- Review the plan output above"
            echo "- Use 'apply' action to deploy the changes"
            echo "- Plan artifact uploaded for review"
          else
            echo "🚀 **Apply completed successfully**"
            echo "- AKS cluster has been deployed/updated"
            echo "- Check the verification output above"
            echo "- Use 'az aks get-credentials' to connect to the cluster"
          fi
