name: self-test-docker

on:
  push:
    branches: [ dev ]
    paths:
      - .github/workflows/self-test-docker.yml
      - .github/actions/docker-build/**
      - .github/workflows/docker-build.yml
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      RUN_DIR: docs/docker-build-test-logs/${{ github.run_id }}
      ECR_REPO: infra/docker-build-test
      GHCR_REPO: infra-docker-build-test
      AWS_REGION: eu-west-1
      ACR_NAME: ${{ vars.ACR_NAME }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare run dir
        shell: bash
        run: |
          mkdir -p "$RUN_DIR"
          echo "Start self-test docker at $(date -Is)" | tee -a "$RUN_DIR/summary.txt"

      - name: GHCR build/push via composite
        id: ghcr
        uses: ./.github/actions/docker-build
        with:
          registry: ghcr
          repository: ${{ env.GHCR_REPO }}
          context: .
          file: ./.github/actions/docker-build/test/Dockerfile
          platforms: linux/amd64
          push: true
          tags: latest

      - name: GHCR run and capture output
        shell: bash
        run: |
          set -euo pipefail
          OWNER_LOWER=$(echo -n "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LOWER}/${GHCR_REPO}:latest"
          echo "Running $IMAGE" | tee -a "$RUN_DIR/ghcr.txt"
          docker run --rm "$IMAGE" | tee -a "$RUN_DIR/ghcr.txt"

      - name: Cloud Login (AWS OIDC)
        if: ${{ env.AWS_ROLE_ARN != '' }}
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure ECR repository exists
        if: ${{ env.AWS_ROLE_ARN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: ECR build/push via composite
        if: ${{ env.AWS_ROLE_ARN != '' }}
        id: ecr
        uses: ./.github/actions/docker-build
        with:
          registry: ecr
          repository: ${{ env.ECR_REPO }}
          context: .
          file: ./.github/actions/docker-build/test/Dockerfile
          platforms: linux/amd64
          push: true
          tags: latest
          use_cloud_login: true
          aws_region: ${{ env.AWS_REGION }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}

      - name: ECR run and capture output
        if: ${{ env.AWS_ROLE_ARN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          # Resolve full image name from ECR
          REGISTRY=$(aws ecr describe-registry | jq -r '.registryId')
          URI=$(aws ecr describe-repositories --repository-names "$ECR_REPO" --query 'repositories[0].repositoryUri' -o text)
          IMAGE="$URI:latest"
          echo "Running $IMAGE" | tee -a "$RUN_DIR/ecr.txt"
          docker run --rm "$IMAGE" | tee -a "$RUN_DIR/ecr.txt"

      - name: Optionally test ACR (if ACR_NAME defined)
        if: ${{ env.ACR_NAME != '' }}
        uses: ./.github/actions/docker-build
        with:
          registry: acr
          acr_name: ${{ env.ACR_NAME }}
          repository: infra/docker-build-test
          context: .
          file: ./.github/actions/docker-build/test/Dockerfile
          platforms: linux/amd64
          push: true
          tags: latest
          use_cloud_login: true
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Write summary
        shell: bash
        run: |
          set -euo pipefail
          echo "\nArtifacts:" >> "$RUN_DIR/summary.txt"
          [ -f "$RUN_DIR/ghcr.txt" ] && echo "- GHCR: $RUN_DIR/ghcr.txt" >> "$RUN_DIR/summary.txt"
          [ -f "$RUN_DIR/ecr.txt" ] && echo "- ECR:  $RUN_DIR/ecr.txt" >> "$RUN_DIR/summary.txt"

      - name: Upload logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-self-test-${{ github.run_id }}
          path: ${{ env.RUN_DIR }}

      - name: Commit logs to repo
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add "$RUN_DIR"
          git commit -m "Self-test docker logs for run ${{ github.run_id }}"
          git push
