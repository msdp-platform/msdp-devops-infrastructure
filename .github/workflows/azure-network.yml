name: azure-network
on:
  push:
    branches: [main]
    paths:
      - "infrastructure/environment/azure/network/**"
      - "config/**"
      - "infrastructure/config/**" # include if globals live here
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Azure OIDC (for azurerm provider)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # AWS OIDC (for S3/DynamoDB backend)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --- BACKEND: create/ensure S3+DDB and write backend-config.json ---
      - name: Terraform Backend (AWS)
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: dev
          cloud: aws
          cloud-segment: azure # key path segment; keeps state per cloud segment
          app: network # stack name
          function: tfstate
          key-salt: infrastructure/environment/azure/network
          aws-region: ${{ secrets.AWS_REGION }}
          # optional: pipeline-name: custom-name-here
          # optional: allow-key-mutation: "false"
          use-shared-lock-table: "true"
          # optional: lock-table-name:

      # --- INIT using the generated backend-config.json (safe) ---
      - name: Terraform Init (Reusable)
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/network
          terraform-version: 1.13.2
          backend-config-file: infrastructure/environment/dev/backend/backend-config.json

      # Plan / Apply (use your config files; fix path if it's 'globals.yaml' not 'global.yaml')
      - name: Terraform plan
        working-directory: infrastructure/environment/azure/network
        run: terraform plan -var="global_config_path=infrastructure/config/globals.yaml" -var="env_config_path=config/envs/dev.yaml" -out=tfplan

      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: infrastructure/environment/azure/network
        run: terraform apply -auto-approve tfplan
