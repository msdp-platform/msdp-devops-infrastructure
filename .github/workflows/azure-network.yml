name: azure-network-stack
on:
  push:
    branches: [main]
    paths:
      - "infrastructure/environment/azure/network/**"
      - "config/**"
      - "infrastructure/config/**"
  workflow_dispatch:
    inputs:
      action:
        description: plan | apply | destroy
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]
      size:
        description: Optional subnet size override (large|medium|small)
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  network-infrastructure:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Step 1: Authentication
      - name: Cloud Login (AWS + Azure)
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 2: Environment Bootstrap
      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: dev

      # Step 3: Generate Network Configuration
      - name: Generate network.auto.tfvars.json
        uses: ./.github/actions/network-tfvars
        with:
          size: ${{ github.event.inputs.size || '' }}

      - name: Move tfvars to working directory
        run: mv network.auto.tfvars.json infrastructure/environment/azure/network/

      # Step 4: Backend Setup (Enhanced with Naming Convention)
      - name: Setup Terraform Backend
        uses: ./.github/actions/terraform-backend-enhanced
        with:
          environment: dev
          platform: azure
          component: network
          aws_region: eu-west-1
          create_resources: "true"

      # Step 5: Terraform Initialization
      - name: Terraform Init
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/network
          backend-config-file: ${{ env.TF_BACKEND_CONFIG_FILE }}
          terraform-version: 1.9.5

      # Step 6: Show Configuration
      - name: Show backend state key and config
        working-directory: infrastructure/environment/azure/network
        run: |
          echo "=== Backend Configuration ==="
          if [ -f "${{ env.TF_BACKEND_CONFIG_FILE }}" ]; then
            echo "State key: $(jq -r '.key' "${{ env.TF_BACKEND_CONFIG_FILE }}")"
            echo "Bucket: $(jq -r '.bucket' "${{ env.TF_BACKEND_CONFIG_FILE }}")"
          fi
          echo ""
          echo "=== Network Configuration ==="
          cat network.auto.tfvars.json | jq .

      # Step 7: Terraform Plan
      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/network
        run: |
          terraform plan -out=tfplan
          echo "Plan completed successfully"

      # Step 8: Terraform Apply
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/network
        run: |
          terraform apply -auto-approve tfplan
          echo "Apply completed successfully"

      # Step 9: Show Outputs
      - name: Show Network Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/network
        run: |
          echo "=== Network Infrastructure Outputs ==="
          terraform output -json | jq .

      # Step 10: Terraform Destroy (Network Only)
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: infrastructure/environment/azure/network
        run: |
          echo "⚠️  WARNING: This will destroy shared network infrastructure!"
          echo "Ensure no AKS clusters are using this network before proceeding."
          terraform destroy -auto-approve