name: _tf_plan_apply
on:
  workflow_call:
    inputs:
      working_directory: { required: true, type: string }
      env_config_path: { required: true, type: string }
      backend_key: { required: true, type: string }
      apply: { required: false, type: boolean, default: false }
      backend_config_file: { required: false, type: string, default: "" }
      extra_vars:
        {
          required: false,
          type: string,
          default: "global_config_path=config/global.yaml",
        }
    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }
      AWS_ROLE_ARN: { required: true }

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  tf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"       >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"       >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Verify backend config file exists (when not using file)
        if: ${{ inputs.backend_config_file == '' }}
        run: |
          set -euo pipefail
          ENV_CONFIG="${{ inputs.env_config_path }}"
          [ -f "$ENV_CONFIG" ] || { echo "ERROR: Environment config file not found: $ENV_CONFIG"; exit 2; }
          echo "âœ… Backend config file verified: $ENV_CONFIG"

      - name: Terraform init (S3 backend via file)
        if: ${{ inputs.backend_config_file != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          set -euo pipefail
          test -f "${{ inputs.backend_config_file }}" || { echo "backend config file not found"; exit 3; }
          # Read JSON and expand backend config
          CFG="${{ inputs.backend_config_file }}"
          BUCKET=$(jq -r .bucket "$CFG") ; KEY="${{ inputs.backend_key }}" ; REGION=$(jq -r .region "$CFG")
          DDB=$(jq -r .dynamodb_table "$CFG")

          # Validate backend config values
          [ -n "${BUCKET}" ] || { echo "ERROR: bucket is empty"; exit 1; }
          [ -n "${KEY}" ] || { echo "ERROR: key is empty"; exit 1; }
          [ -n "${REGION}" ] || { echo "ERROR: region is empty"; exit 1; }
          [ -n "${DDB}" ] || { echo "ERROR: dynamodb_table is empty"; exit 1; }

          echo "ðŸ”§ Initializing Terraform with backend config from file"
          echo "Backend config: bucket=${BUCKET}, key=${KEY}, region=${REGION}, dynamodb_table=${DDB}"
          terraform init -reconfigure \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${DDB}" \
            -backend-config="encrypt=true"

      - name: Terraform init (S3 backend via config)
        if: ${{ inputs.backend_config_file == '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          set -euo pipefail

          # Load backend config from env config file
          ENV_CONFIG="${{ inputs.env_config_path }}"
          # Make path relative to repository root if it's not absolute
          if [[ "$ENV_CONFIG" != /* ]]; then
            ENV_CONFIG="$GITHUB_WORKSPACE/$ENV_CONFIG"
          fi
          [ -f "$ENV_CONFIG" ] || { echo "ERROR: Environment config file not found: $ENV_CONFIG"; exit 1; }

          BUCKET=$(yq eval '.state.bucket' "$ENV_CONFIG")
          REGION=$(yq eval '.state.region' "$ENV_CONFIG")
          DDB=$(yq eval '.state.dynamodb' "$ENV_CONFIG")
          KEY="${{ inputs.backend_key }}"

          # Validate backend config values
          [ -n "${BUCKET}" ] || { echo "ERROR: bucket is empty in config file"; exit 1; }
          [ -n "${KEY}" ] || { echo "ERROR: backend_key is empty"; exit 1; }
          [ -n "${REGION}" ] || { echo "ERROR: region is empty in config file"; exit 1; }
          [ -n "${DDB}" ] || { echo "ERROR: dynamodb is empty in config file"; exit 1; }

          echo "ðŸ”§ Initializing Terraform with backend config from config file"
          echo "Backend config: bucket=${BUCKET}, key=${KEY}, region=${REGION}, dynamodb_table=${DDB}"
          terraform init -reconfigure \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${DDB}" \
            -backend-config="encrypt=true"

      - name: Terraform plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "ðŸ“‹ Running Terraform plan"
          terraform plan \
            -var="${{ inputs.extra_vars }}" \
            -var="env_config_path=${{ inputs.env_config_path }}" \
            -out=tfplan

      - name: Terraform apply
        if: ${{ inputs.apply }}
        working-directory: ${{ inputs.working_directory }}
        run: terraform apply -auto-approve tfplan
