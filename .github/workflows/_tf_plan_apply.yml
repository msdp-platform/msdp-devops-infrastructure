name: _tf_plan_apply
on:
  workflow_call:
    inputs:
      working_directory: { required: true, type: string }
      env_config_path: { required: true, type: string }
      backend_key: { required: true, type: string }
      apply: { required: false, type: boolean, default: false }
      backend_config_file: { required: false, type: string, default: "" }
      extra_vars:
        {
          required: false,
          type: string,
          default: "global_config_path=config/global.yaml",
        }
    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }
      AWS_ROLE_ARN: { required: true }
      AWS_REGION: { required: true }
      TF_BACKEND_BUCKET: { required: true }
      TF_BACKEND_DDB: { required: true }

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  tf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"       >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"       >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Verify backend inputs (when not using file)
        if: ${{ inputs.backend_config_file == '' }}
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_DDB: ${{ secrets.TF_BACKEND_DDB }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          for k in TF_BACKEND_BUCKET TF_BACKEND_DDB AWS_REGION; do
            v="${!k:-}"
            [ -n "$v" ] || { echo "Missing required backend secret: $k"; exit 2; }
          done
          echo "âœ… Backend secrets verified"

      - name: Terraform init (S3 backend via file)
        if: ${{ inputs.backend_config_file != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          set -euo pipefail
          test -f "${{ inputs.backend_config_file }}" || { echo "backend config file not found"; exit 3; }
          # Read JSON and expand backend config
          CFG="${{ inputs.backend_config_file }}"
          BUCKET=$(jq -r .bucket "$CFG") ; KEY="${{ inputs.backend_key }}" ; REGION=$(jq -r .region "$CFG")
          DDB=$(jq -r .dynamodb_table "$CFG")
          echo "ðŸ”§ Initializing Terraform with backend config from file"
          terraform init -reconfigure \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${DDB}" \
            -backend-config="encrypt=true"

      - name: Terraform init (S3 backend via secrets)
        if: ${{ inputs.backend_config_file == '' }}
        working-directory: ${{ inputs.working_directory }}
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_DDB: ${{ secrets.TF_BACKEND_DDB }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          echo "ðŸ”§ Initializing Terraform with backend config from secrets"
          terraform init -reconfigure \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${{ inputs.backend_key }}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB}" \
            -backend-config="encrypt=true"

      - name: Terraform plan
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "ðŸ“‹ Running Terraform plan"
          terraform plan \
            -var="${{ inputs.extra_vars }}" \
            -var="env_config_path=${{ inputs.env_config_path }}" \
            -out=tfplan

      - name: Terraform apply
        if: ${{ inputs.apply }}
        working-directory: ${{ inputs.working_directory }}
        run: terraform apply -auto-approve tfplan
