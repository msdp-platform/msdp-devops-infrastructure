name: aks
on:
  push:
    branches: [main]
    paths:
      - "infrastructure/environment/azure/aks/**"
      - "config/**"
      - "infrastructure/config/**"
  workflow_dispatch:
    inputs:
      action:
        description: plan | apply | destroy
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]
      resource_group:
        required: true
        default: rg-shared-dev
      aks_name:
        required: true
        default: aks-dev-01

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  plan-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Azure OIDC
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # AWS OIDC for S3 backend of AKS state
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: dev

      # Backend creation + config (reusable, S3+DDB)
      - name: Terraform Backend (AWS)
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: dev
          cloud: aws
          cloud-segment: azure
          app: aks
          function: tfstate
          key-salt: infrastructure/environment/azure/aks
          aws-region: eu-west-1
          use-shared-lock-table: "true"

      - name: Terraform Init (Reusable)
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/aks
          terraform-version: 1.13.2
          backend-config-file: ${{ env.TF_BACKEND_CONFIG_FILE }}

      - name: Build aks.auto.tfvars.json
        if: ${{ github.event_name == 'workflow_dispatch' }}
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: |
          set -euo pipefail
          rg="${{ github.event.inputs.resource_group || '' }}"; name="${{ github.event.inputs.aks_name || '' }}"
          if [ -z "$rg" ] || [ -z "$name" ]; then
            echo "::error ::resource_group and aks_name are required"; exit 1
          fi
          # Simplest: use existing RG, discover subnet by tags (role=aks)
          jq -n --arg rg "$rg" --arg name "$name" \
                '{resource_group:$rg, aks_name:$name, manage_resource_group:false}' \
              > aks.auto.tfvars.json
          echo "Wrote $(pwd)/aks.auto.tfvars.json (tag-based subnet discovery)"

      - name: Terraform plan
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform plan -out=tfplan

      - name: Terraform apply
        if: ${{ (github.event_name != 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request') || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform apply -auto-approve tfplan || { terraform plan -out=tfplan && terraform apply -auto-approve tfplan; }

      - name: Terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform destroy -auto-approve
