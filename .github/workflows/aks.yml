# NOTE: Config-driven workflow. Values are read from
# - infrastructure/config/globals.yaml (global defaults)
# - config/envs/<env>.yaml (environment specifics)
# This workflow supports naming-driven creation and controlled destroy.
name: aks

on:
  push:
    branches: [dev, main]
    paths:
      - "infrastructure/environment/azure/aks/**"
      - "config/**"
      - "infrastructure/config/**"
  workflow_dispatch:
    inputs:
      action:
        description: plan | apply | destroy
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]
      env:
        description: Environment name (used to resolve config paths)
        required: false
        default: dev
      aks_name:
        description: AKS cluster name (when provided, overrides env config)
        required: false
        default: ""
      rg_name:
        description: Resource Group name (when provided, overrides env config)
        required: false
        default: ""
      region:
        description: Azure region (when provided, overrides globals.yaml)
        required: false
        default: ""
      size:
        description: Optional cluster size (small|medium|large) for vnet/subnet naming and node caps
        required: false
        default: ""
      create_rg:
        description: Create the Resource Group if it does not exist
        required: false
        default: false
        type: boolean
      manage_network:
        description: Auto-create VNet/Subnet if they don't exist
        required: false
        default: false
        type: boolean
      push_changes:
        description: Commit and push config updates (env file) to the current branch
        required: false
        default: true
        type: boolean
      delete_network:
        description: On destroy, also delete VNet/Subnet via Azure CLI after AKS destroy
        required: false
        default: false
        type: boolean
      delete_rg:
        description: On destroy, delete the entire Resource Group via Azure CLI (skips Terraform destroy)
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: ${{ inputs.env || 'dev' }}
      - name: Generate cluster matrix from config
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          CFG_ENV="${TF_VAR_env_config_path:-config/envs/${{ inputs.env || 'dev' }}.yaml}"
          MATRIX=$( ./.github/scripts/aks.sh gen-matrix --cfg-env "$CFG_ENV" ${INPUT_NAME:+--name "$INPUT_NAME"} )
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        env:
          INPUT_NAME: ${{ inputs.aks_name || '' }}

  plan-apply:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      # Azure OIDC
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        shell: bash
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # AWS OIDC for S3 backend of AKS state
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: ${{ inputs.env || 'dev' }}

      # Backend creation + config (reusable, S3+DDB)
      - name: Terraform Backend (AWS)
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: ${{ inputs.env || 'dev' }}
          cloud: aws
          cloud-segment: azure
          app: aks
          function: tfstate
          key-salt: infrastructure/environment/azure/aks
          aws-region: eu-west-1
          use-shared-lock-table: "true"
          pipeline-name: aks-${{ matrix.name }}

      - name: Terraform Init (Reusable)
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/aks
          terraform-version: 1.13.2
          backend-config-file: ${{ env.TF_BACKEND_CONFIG_FILE }}

      - name: Show backend state key
        shell: bash
        run: |
          set -euo pipefail
          CONFIG="${{ env.TF_BACKEND_CONFIG_FILE }}"
          if [ -f "$CONFIG" ]; then
            echo "Backend state key: $(jq -r '.key' "$CONFIG")"
          else
            echo "Backend config file not found: $CONFIG" >&2
          fi

      - name: Resolve names and build aks.auto.tfvars.json
        id: build
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: |
          set -euo pipefail
          CFG_GLOBAL="${TF_VAR_global_config_path:-infrastructure/config/globals.yaml}"
          CFG_ENV="${TF_VAR_env_config_path:-config/envs/${{ inputs.env || 'dev' }}.yaml}"
          ./.github/scripts/aks.sh build-tfvars \
            --cfg-global "$CFG_GLOBAL" --cfg-env "$CFG_ENV" --name "${{ matrix.name }}" \
            ${INPUT_AKS_NAME:+--aks-name "$INPUT_AKS_NAME"} \
            ${INPUT_RG_NAME:+--rg-name "$INPUT_RG_NAME"} \
            ${INPUT_REGION:+--region "$INPUT_REGION"} \
            ${INPUT_SIZE:+--size "$INPUT_SIZE"} \
            --manage-network "${{ inputs.manage_network || false }}" \
            --create-rg "${{ inputs.create_rg || false }}" \
            --out aks.auto.tfvars.json --outputs-file "$GITHUB_OUTPUT"
        env:
          INPUT_AKS_NAME: ${{ inputs.aks_name || '' }}
          INPUT_RG_NAME: ${{ inputs.rg_name || '' }}
          INPUT_REGION: ${{ inputs.region || '' }}
          INPUT_SIZE: ${{ inputs.size || '' }}

      - name: Update env config and push changes
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.push_changes == true }}
        shell: bash
        run: |
          set -euo pipefail
          CFG_ENV="${TF_VAR_env_config_path:-config/envs/${{ inputs.env || 'dev' }}.yaml}"
          ./.github/scripts/aks.sh update-config \
            --cfg-env "$CFG_ENV" \
            --rg '${{ steps.build.outputs.rg }}' \
            --vnet '${{ steps.build.outputs.vnet }}' \
            --subnet '${{ steps.build.outputs.subnet }}' \
            --aks '${{ steps.build.outputs.aks }}' \
            --location '${{ steps.build.outputs.location }}'
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$CFG_ENV"
          if ! git diff --cached --quiet; then
            git commit -m "aks: update ${CFG_ENV} with naming-driven values"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Terraform plan
        if: ${{ inputs.action == 'plan' || inputs.action == 'apply' || github.event_name == 'push' }}
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: terraform plan -out=tfplan

      - name: Terraform apply
        if: ${{ inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/dev') }}
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: terraform apply -auto-approve tfplan || { terraform plan -out=tfplan && terraform apply -auto-approve tfplan; }

      - name: Destroy (AKS, optional network/RG)
        if: ${{ inputs.action == 'destroy' }}
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: |
          set -euo pipefail
          ./.github/scripts/aks.sh destroy \
            --rg '${{ steps.build.outputs.rg }}' \
            --vnet '${{ steps.build.outputs.vnet }}' \
            --subnet '${{ steps.build.outputs.subnet }}' \
            --delete-rg '${{ inputs.delete_rg || false }}' \
            --delete-network '${{ inputs.delete_network || false }}'
