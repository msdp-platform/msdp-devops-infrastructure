# NOTE: Config-driven workflow. Values are read from
# - infrastructure/config/globals.yaml (global defaults)
# - config/envs/<env>.yaml (environment specifics)
# Only input is action; matrix is derived from azure.aksClusters.
name: aks
on:
  push:
    branches: [main]
    paths:
      - "infrastructure/environment/azure/aks/**"
      - "config/**"
      - "infrastructure/config/**"
  workflow_dispatch:
    inputs:
      action:
        description: plan | apply | destroy
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: dev
      - name: Generate cluster matrix from config
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          CFG_ENV="${TF_VAR_env_config_path:-config/envs/dev.yaml}"
          if command -v yq >/dev/null 2>&1; then
            raw=$(yq -r '.azure.aksClusters // {}' "$CFG_ENV")
          else
            raw="{}"
          fi
          # Normalize: support map form {clusterName: {size, subnetName?}} or array form
          clusters=$(jq -c 'if type=="object" then [ to_entries[] | {name: .key, subnetName: (.value.subnetName // ("snet-" + .key))} ] elif type=="array" then [ .[] | {name: .name, subnetName: (.subnetName // ("snet-" + .name))} ] else [] end' <<< "$raw")

          # Fallback to single cluster from aksName/subnetName if aksClusters is empty
          if [ "$(jq -r 'length' <<< "$clusters")" -eq 0 ]; then
            name=$(grep -E '^\s*aksName\s*:' -n "$CFG_ENV" | sed 's/.*:\s*//' | tr -d '"' | tr -d "'" || true)
            sname=$(grep -E '^\s*subnetName\s*:' -n "$CFG_ENV" | sed 's/.*:\s*//' | tr -d '"' | tr -d "'" || true)
            if [ -z "${name:-}" ] || [ -z "${sname:-}" ]; then
              echo "::error ::No azure.aksClusters and missing azure.aksName/subnetName in env config"; exit 1
            fi
            clusters=$(jq -nc --arg n "$name" --arg s "$sname" '[{name:$n, subnetName:$s}]')
          fi
          echo "matrix=$clusters" >> $GITHUB_OUTPUT

  plan-apply:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      # Azure OIDC
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM env
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # AWS OIDC for S3 backend of AKS state
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Bootstrap environment
        uses: ./.github/actions/bootstrap-env
        with:
          env: dev

      # Backend creation + config (reusable, S3+DDB)
      - name: Terraform Backend (AWS)
        uses: ./.github/actions/terraform-backend
        with:
          repo-shortname: infra
          project: msdp
          env: dev
          cloud: aws
          cloud-segment: azure
          app: aks
          function: tfstate
          key-salt: infrastructure/environment/azure/aks
          aws-region: eu-west-1
          use-shared-lock-table: "true"
          pipeline-name: aks-${{ matrix.name }}

      - name: Terraform Init (Reusable)
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/aks
          terraform-version: 1.13.2
          backend-config-file: ${{ env.TF_BACKEND_CONFIG_FILE }}

      - name: Show backend state key
        shell: bash
        run: |
          set -euo pipefail
          CONFIG="${{ env.TF_BACKEND_CONFIG_FILE }}"
          if [ -f "$CONFIG" ]; then
            echo "Backend state key: $(jq -r '.key' "$CONFIG")"
          else
            echo "Backend config file not found: $CONFIG" >&2
          fi

      - name: Build aks.auto.tfvars.json (remote_state only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        working-directory: infrastructure/environment/azure/aks
        shell: bash
        run: |
          set -euo pipefail
          # Config-driven remote_state only (unique and steady)
          CFG_GLOBAL="${TF_VAR_global_config_path:-infrastructure/config/globals.yaml}"
          CFG_ENV="${TF_VAR_env_config_path:-config/envs/dev.yaml}"
          get_yaml() {
            local file="$1" key="$2"
            if command -v yq >/dev/null 2>&1; then
              yq -r "$key" "$file" 2>/dev/null || true
            else
              grep -E "^\s*${key//./\\.}\s*:\s*" "$file" | head -n1 | sed 's/.*:\s*//' | tr -d '"' | tr -d "'" || true
            fi
          }
          rg=$(get_yaml "$CFG_ENV" '.azure.resourceGroup')
          name='${{ matrix.name }}'
          sname='${{ matrix.subnetName }}'
          net_key=$(get_yaml "$CFG_ENV" '.state.networkKey')
          if [ -z "${rg:-}" ] || [ -z "${name:-}" ] || [ -z "${sname:-}" ] || [ -z "${net_key:-}" ]; then
            echo "::error ::Missing required config: azure.resourceGroup, azure.aksName, azure.subnetName, and state.networkKey are required for remote_state mode."; exit 1
          fi
          # Read backend config for remote state bucket/region/ddb
          CFG="${{ env.TF_BACKEND_CONFIG_FILE }}"
          bucket=$(jq -r '.bucket' "$CFG")
          region=$(jq -r '.region' "$CFG")
          ddb=$(jq -r '.dynamodb_table' "$CFG")
          # Use remote_state to resolve subnet from the network stack outputs
          jq -n --arg rg "$rg" --arg name "$name" --arg sname "$sname" \
                --arg bucket "$bucket" --arg region "$region" --arg ddb "$ddb" --arg key "$net_key" \
                '{resource_group:$rg, aks_name:$name, subnet_name:$sname, remote_state_bucket:$bucket, remote_state_region:$region, remote_state_dynamodb_table:$ddb, remote_state_key:$key}' \
            > aks.auto.tfvars.json
          echo "Wrote $(pwd)/aks.auto.tfvars.json (remote_state only)"

      - name: Terraform plan
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform plan -out=tfplan

      - name: Terraform apply
        if: ${{ (github.event_name != 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event_name != 'pull_request') || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform apply -auto-approve tfplan || { terraform plan -out=tfplan && terraform apply -auto-approve tfplan; }

      - name: Terraform destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: infrastructure/environment/azure/aks
        run: terraform destroy -auto-approve
