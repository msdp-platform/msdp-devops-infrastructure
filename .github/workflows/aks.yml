name: Azure AKS Clusters

on:
  push:
    branches: [main]
    paths:
      - "infrastructure/environment/azure/aks/**"
      - "config/dev.yaml"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]
      environment:
        description: "Environment"
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]
      cluster_name:
        description: "Specific cluster name (optional, deploys all if empty)"
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

env:
  TF_INPUT: "false"
  ARM_USE_OIDC: "true"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install PyYAML

      - name: Generate cluster matrix
        id: generate-matrix
        run: |
          python3 << 'EOF'
          import yaml
          import json
          import os
          import sys
          
          try:
              # Load configuration
              env = "${{ github.event.inputs.environment || 'dev' }}"
              cluster_filter = "${{ github.event.inputs.cluster_name }}"
              
              print(f"Loading configuration for environment: {env}")
              config_file = f'config/{env}.yaml'
              
              if not os.path.exists(config_file):
                  print(f"ERROR: Configuration file not found: {config_file}")
                  # Return empty matrix if config doesn't exist
                  matrix = {"include": []}
              else:
                  with open(config_file, 'r') as f:
                      config = yaml.safe_load(f)
                  
                  # Extract AKS clusters
                  clusters = config.get('azure', {}).get('aks', {}).get('clusters', [])
                  
                  if not clusters:
                      print(f"WARNING: No AKS clusters defined in {config_file}")
                      matrix = {"include": []}
                  else:
                      print(f"Found {len(clusters)} clusters in configuration")
                      
                      # Filter by cluster name if specified
                      if cluster_filter:
                          clusters = [c for c in clusters if c.get('name') == cluster_filter]
                          print(f"Filtered to {len(clusters)} clusters matching '{cluster_filter}'")
                      
                      # Add environment and network info to each cluster
                      network_config = config.get('azure', {}).get('network', {})
                      
                      for cluster in clusters:
                          cluster['environment'] = env
                          cluster['location'] = config.get('azure', {}).get('location', 'uksouth')
                          cluster['network_resource_group_name'] = network_config.get('resource_group_name', '')
                          cluster['vnet_name'] = network_config.get('vnet_name', '')
                          cluster['tenant_id'] = "${{ secrets.AZURE_TENANT_ID }}"
                          
                          # Ensure all required fields have defaults
                          cluster.setdefault('kubernetes_version', '1.29.7')
                          cluster.setdefault('system_node_count', 2)
                          cluster.setdefault('system_vm_size', 'Standard_D2s_v3')
                          cluster.setdefault('user_vm_size', 'Standard_D4s_v3')
                          cluster.setdefault('user_min_count', 1)
                          cluster.setdefault('user_max_count', 5)
                          cluster.setdefault('user_spot_enabled', False)
                      
                      matrix = {"include": clusters}
              
              print(f"Generated matrix: {json.dumps(matrix, indent=2)}")
              
              # Write to GitHub output
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"matrix={json.dumps(matrix)}\n")
                  
          except Exception as e:
              print(f"ERROR generating matrix: {e}")
              # Return empty matrix on error
              matrix = {"include": []}
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"matrix={json.dumps(matrix)}\n")
              sys.exit(1)
          EOF

  check-matrix:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      has-clusters: ${{ steps.check.outputs.has-clusters }}
    steps:
      - name: Check if matrix has clusters
        id: check
        run: |
          MATRIX='${{ needs.prepare.outputs.matrix }}'
          echo "Matrix content: $MATRIX"
          
          # Check if matrix has any clusters
          if [ "$MATRIX" = '{"include":[]}' ] || [ -z "$MATRIX" ]; then
            echo "No clusters found in matrix"
            echo "has-clusters=false" >> $GITHUB_OUTPUT
          else
            echo "Clusters found in matrix"
            echo "has-clusters=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: [prepare, check-matrix]
    runs-on: ubuntu-latest
    if: ${{ needs.check-matrix.outputs.has-clusters == 'true' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: "true"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install PyYAML

      - name: Cloud Login
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Generate Terraform Variables
        working-directory: infrastructure/environment/azure/aks
        run: |
          python3 << 'EOF'
          import yaml
          import json
          
          # Load configuration
          with open('../../../../config/${{ matrix.environment }}.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Extract cluster-specific configuration
          cluster_config = ${{ toJson(matrix) }}
          tags = config.get('tags', {})
          
          # Generate terraform.tfvars.json
          tfvars = {
              'cluster_name': cluster_config['name'],
              'kubernetes_version': cluster_config['kubernetes_version'],
              'network_resource_group_name': cluster_config['network_resource_group_name'],
              'vnet_name': cluster_config['vnet_name'],
              'subnet_name': cluster_config['subnet_name'],
              'tenant_id': cluster_config['tenant_id'],
              'system_node_count': cluster_config['system_node_count'],
              'system_vm_size': cluster_config['system_vm_size'],
              'user_vm_size': cluster_config['user_vm_size'],
              'user_min_count': cluster_config['user_min_count'],
              'user_max_count': cluster_config['user_max_count'],
              'user_spot_enabled': cluster_config['user_spot_enabled'],
              'tags': tags
          }
          
          with open('terraform.tfvars.json', 'w') as f:
              json.dump(tfvars, f, indent=2)
          
          print("Generated terraform.tfvars.json:")
          print(json.dumps(tfvars, indent=2))
          EOF

      - name: Setup Terraform Backend
        uses: ./.github/actions/terraform-backend-enhanced
        with:
          environment: ${{ matrix.environment }}
          platform: azure
          component: aks
          instance: ${{ matrix.name }}
          aws_region: eu-west-1
          create_resources: "true"

      - name: Terraform Init
        uses: ./.github/actions/terraform-init
        with:
          working-directory: infrastructure/environment/azure/aks
          backend-config-file: ${{ env.TF_BACKEND_CONFIG_FILE }}
          terraform-version: 1.9.5

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: |
          terraform plan -out=tfplan
          echo "✅ Terraform plan completed successfully for ${{ matrix.name }}"

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: |
          terraform apply -auto-approve tfplan
          echo "✅ Terraform apply completed successfully for ${{ matrix.name }}"

      - name: Show Outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: infrastructure/environment/azure/aks
        run: |
          echo "=== AKS Cluster ${{ matrix.name }} Outputs ==="
          terraform output -json | jq .

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: infrastructure/environment/azure/aks
        run: |
          echo "⚠️  WARNING: This will destroy AKS cluster ${{ matrix.name }}!"
          terraform destroy -auto-approve