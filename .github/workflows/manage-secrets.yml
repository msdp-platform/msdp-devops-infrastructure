name: Manage Backstage Secrets

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - create-secrets
          - update-secrets
          - rotate-secrets
          - validate-secrets
      environment:
        description: "Environment"
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      business_unit:
        description: "Business Unit"
        required: true
        type: choice
        options:
          - platform-core
          - food-delivery
          - grocery-delivery
          - cleaning-services
          - repair-services
      country:
        description: "Country"
        required: true
        type: choice
        options:
          - global
          - uk
          - india

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  KUBECONFIG: /tmp/kubeconfig

jobs:
  manage-secrets:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --file $KUBECONFIG

      - name: Create secrets
        if: github.event.inputs.action == 'create-secrets'
        run: |
          ENV="${{ github.event.inputs.environment }}"
          BU="${{ github.event.inputs.business_unit }}"
          COUNTRY="${{ github.event.inputs.country }}"
          SECRET_NAME="backstage-${ENV}-${BU}-${COUNTRY}-secrets"

          echo "Creating secret: $SECRET_NAME"

          kubectl create secret generic "$SECRET_NAME" \
            --namespace=crossplane-system \
            --from-literal=postgres-password="$(openssl rand -base64 32)" \
            --from-literal=github-token="${{ secrets.GITHUB_TOKEN }}" \
            --from-literal=azure-token="${{ secrets.AZURE_CLIENT_SECRET }}" \
            --from-literal=argocd-password="${{ secrets.ARGOCD_PASSWORD }}" \
            --from-literal=session-secret="$(openssl rand -base64 32)" \
            --from-literal=stripe-token="${{ secrets.STRIPE_TOKEN }}" \
            --from-literal=razorpay-token="${{ secrets.RAZORPAY_TOKEN }}" \
            --from-literal=paytm-token="${{ secrets.PAYTM_TOKEN }}" \
            --from-literal=hmrc-token="${{ secrets.HMRC_TOKEN }}" \
            --from-literal=fssai-token="${{ secrets.FSSAI_TOKEN }}" \
            --from-literal=gst-token="${{ secrets.GST_TOKEN }}"

          echo "✅ Secret created: $SECRET_NAME"

      - name: Update secrets
        if: github.event.inputs.action == 'update-secrets'
        run: |
          ENV="${{ github.event.inputs.environment }}"
          BU="${{ github.event.inputs.business_unit }}"
          COUNTRY="${{ github.event.inputs.country }}"
          SECRET_NAME="backstage-${ENV}-${BU}-${COUNTRY}-secrets"

          echo "Updating secret: $SECRET_NAME"

          # Delete existing secret
          kubectl delete secret "$SECRET_NAME" -n crossplane-system --ignore-not-found=true

          # Create new secret
          kubectl create secret generic "$SECRET_NAME" \
            --namespace=crossplane-system \
            --from-literal=postgres-password="$(openssl rand -base64 32)" \
            --from-literal=github-token="${{ secrets.GITHUB_TOKEN }}" \
            --from-literal=azure-token="${{ secrets.AZURE_CLIENT_SECRET }}" \
            --from-literal=argocd-password="${{ secrets.ARGOCD_PASSWORD }}" \
            --from-literal=session-secret="$(openssl rand -base64 32)" \
            --from-literal=stripe-token="${{ secrets.STRIPE_TOKEN }}" \
            --from-literal=razorpay-token="${{ secrets.RAZORPAY_TOKEN }}" \
            --from-literal=paytm-token="${{ secrets.PAYTM_TOKEN }}" \
            --from-literal=hmrc-token="${{ secrets.HMRC_TOKEN }}" \
            --from-literal=fssai-token="${{ secrets.FSSAI_TOKEN }}" \
            --from-literal=gst-token="${{ secrets.GST_TOKEN }}"

          echo "✅ Secret updated: $SECRET_NAME"

      - name: Rotate secrets
        if: github.event.inputs.action == 'rotate-secrets'
        run: |
          ENV="${{ github.event.inputs.environment }}"
          BU="${{ github.event.inputs.business_unit }}"
          COUNTRY="${{ github.event.inputs.country }}"
          SECRET_NAME="backstage-${ENV}-${BU}-${COUNTRY}-secrets"

          echo "Rotating secrets for: $SECRET_NAME"

          # Generate new random secrets
          NEW_POSTGRES_PASSWORD=$(openssl rand -base64 32)
          NEW_SESSION_SECRET=$(openssl rand -base64 32)

          # Update secret with new values
          kubectl patch secret "$SECRET_NAME" -n crossplane-system --type='json' \
            -p='[{"op": "replace", "path": "/data/postgres-password", "value": "'$(echo -n "$NEW_POSTGRES_PASSWORD" | base64)'"}]'

          kubectl patch secret "$SECRET_NAME" -n crossplane-system --type='json' \
            -p='[{"op": "replace", "path": "/data/session-secret", "value": "'$(echo -n "$NEW_SESSION_SECRET" | base64)'"}]'

          echo "✅ Secrets rotated for: $SECRET_NAME"

      - name: Validate secrets
        if: github.event.inputs.action == 'validate-secrets'
        run: |
          ENV="${{ github.event.inputs.environment }}"
          BU="${{ github.event.inputs.business_unit }}"
          COUNTRY="${{ github.event.inputs.country }}"
          SECRET_NAME="backstage-${ENV}-${BU}-${COUNTRY}-secrets"

          echo "Validating secret: $SECRET_NAME"

          if kubectl get secret "$SECRET_NAME" -n crossplane-system; then
            echo "✅ Secret exists: $SECRET_NAME"
            
            # Check if all required keys exist
            REQUIRED_KEYS=("postgres-password" "github-token" "azure-token" "argocd-password" "session-secret")
            
            for key in "${REQUIRED_KEYS[@]}"; do
              if kubectl get secret "$SECRET_NAME" -n crossplane-system -o jsonpath="{.data.$key}" > /dev/null 2>&1; then
                echo "✅ Key exists: $key"
              else
                echo "❌ Key missing: $key"
                exit 1
              fi
            done
            
            echo "✅ All required keys are present"
          else
            echo "❌ Secret does not exist: $SECRET_NAME"
            exit 1
          fi

      - name: List all secrets
        run: |
          echo "🔍 All Backstage secrets:"
          kubectl get secrets -n crossplane-system -l app=backstage
          echo

          echo "🔍 Secret details:"
          kubectl describe secrets -n crossplane-system -l app=backstage
