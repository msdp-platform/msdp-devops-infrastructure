name: docker-build

on:
  workflow_call:
    inputs:
      registry:
        description: "Container registry provider (ghcr | ecr | acr)"
        required: true
        type: string
      repository:
        description: "Repository path/name. For GHCR include org/repo or org/app; for ECR/ACR, just the repo path under the registry"
        required: true
        type: string
      context:
        description: "Docker build context"
        required: false
        default: .
        type: string
      file:
        description: "Dockerfile path"
        required: false
        default: ./Dockerfile
        type: string
      platforms:
        description: "Target platforms (comma-separated for buildx)"
        required: false
        default: linux/amd64
        type: string
      push:
        description: "Push built image to registry"
        required: false
        default: true
        type: boolean
      tags:
        description: "Additional tags (comma-separated, e.g., latest,dev)"
        required: false
        default: ""
        type: string
      labels:
        description: "Additional labels (newline or comma-separated key=value)"
        required: false
        default: ""
        type: string
      cache:
        description: "Enable Buildx GHA cache"
        required: false
        default: true
        type: boolean
      use_cloud_login:
        description: "Use reusable cloud OIDC login (AWS/Azure)"
        required: false
        default: false
        type: boolean
      aws_region:
        description: "AWS region (if registry=ecr and using cloud login)"
        required: false
        default: eu-west-1
        type: string
      acr_name:
        description: "Azure Container Registry name (e.g., myacr)"
        required: false
        default: ""
        type: string
    secrets:
      AWS_ROLE_ARN:
        description: "AWS role to assume for ECR (used when use_cloud_login=true)"
        required: false
      AZURE_CLIENT_ID:
        description: "Azure Client ID (used when use_cloud_login=true and/or ACR)"
        required: false
      AZURE_TENANT_ID:
        description: "Azure Tenant ID (used when use_cloud_login=true and/or ACR)"
        required: false
      AZURE_SUBSCRIPTION_ID:
        description: "Azure Subscription ID (used when use_cloud_login=true and/or ACR)"
        required: false

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILD_CONTEXT: ${{ inputs.context }}
      DOCKER_FILE: ${{ inputs.file }}
      DOCKER_PLATFORMS: ${{ inputs.platforms }}
      DOCKER_PUSH: ${{ inputs.push }}
      DOCKER_CACHE: ${{ inputs.cache }}
      EXTRA_TAGS: ${{ inputs.tags }}
      EXTRA_LABELS: ${{ inputs.labels }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Optional Cloud Login (OIDC)
        if: ${{ inputs.use_cloud_login }}
        uses: ./.github/actions/cloud-login
        with:
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Resolve image reference
        id: image
        shell: bash
        run: |
          set -euo pipefail
          REGISTRY="${{ inputs.registry }}"
          REPO="${{ inputs.repository }}"
          case "$REGISTRY" in
            ghcr)
              IMAGE="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/$REPO"
              ;;
            ecr)
              echo "Using ECR. Will resolve registry after login.";
              IMAGE="$REPO"
              ;;
            acr)
              if [ -z "${{ inputs.acr_name }}" ]; then
                echo "acr_name input is required when registry=acr" >&2
                exit 1
              fi
              IMAGE="${{ inputs.acr_name }}.azurecr.io/$REPO"
              ;;
            *)
              echo "Unsupported registry: $REGISTRY (expected ghcr|ecr|acr)" >&2
              exit 1
              ;;
          esac
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        if: ${{ inputs.registry == 'ghcr' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to ECR
        id: ecr-login
        if: ${{ inputs.registry == 'ecr' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute ECR image
        if: ${{ inputs.registry == 'ecr' }}
        id: ecr-image
        shell: bash
        run: |
          set -euo pipefail
          REG="${{ steps.ecr-login.outputs.registry }}"
          IMG="${REG}/${{ inputs.repository }}"
          echo "image=$IMG" >> "$GITHUB_OUTPUT"

      - name: Login to ACR (via az)
        if: ${{ inputs.registry == 'acr' }}
        shell: bash
        run: |
          set -euo pipefail
          az acr login -n "${{ inputs.acr_name }}"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.ecr-image.outputs.image || steps.image.outputs.image }}
          tags: |
            type=sha
            type=ref,event=branch
            ${{ inputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}
            ${{ inputs.labels }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          file: ${{ env.DOCKER_FILE }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: ${{ env.DOCKER_PUSH }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.DOCKER_CACHE && 'type=gha' || '' }}
          cache-to: ${{ env.DOCKER_CACHE && 'type=gha,mode=max' || '' }}

