name: "Terraform Backend (Provision/Configure)"
description: "Composite action to ensure Terraform backend resources exist per environment and emit backend-config.json."

inputs:
  repo-shortname:
    description: "Repository short name (e.g., infra)"
    required: true
  project:
    description: "Project name (e.g., msdp)"
    required: true
  env:
    description: "Environment: dev | sit | prod"
    required: true
  app:
    description: "Application/service name (e.g., crossplane)"
    required: true
  function:
    description: "Function name for bucket (e.g., tfstate)"
    required: true
  cloud:
    description: "Target cloud provider: aws | azure"
    required: true
  aws-region:
    description: "AWS region (only when cloud=aws)"
    required: false
    default: "eu-west-1"
  azure-region:
    description: "Azure region (only when cloud=azure)"
    required: false
    default: "uksouth"

runs:
  using: "composite"
  steps:
    # Ensure required CLIs are available. Runners typically have aws/az installed.
    - name: Check CLIs
      shell: bash
      run: |
        set -euo pipefail
        command -v jq >/dev/null 2>&1 || { echo "jq is required"; exit 1; }
        command -v yq >/dev/null 2>&1 || { echo "yq is required"; exit 1; }
        if [ "${{ inputs.cloud }}" = "aws" ]; then command -v aws >/dev/null 2>&1 || { echo "aws CLI required"; exit 1; }; fi
        if [ "${{ inputs.cloud }}" = "azure" ] || [ "${{ inputs.cloud }}" = "az" ]; then command -v az >/dev/null 2>&1 || { echo "az CLI required"; exit 1; }; fi

    # AWS path: create S3 bucket and DynamoDB table if missing, then write backend-config.json
    - name: Provision AWS backend (S3 + DynamoDB)
      if: ${{ inputs.cloud == 'aws' }}
      shell: bash
      run: |
        set -euo pipefail
        
        # Use input values directly
        REPO_SHORT="${{ inputs['repo-shortname'] }}"
        PROJECT="${{ inputs.project }}"
        ENVIRONMENT="${{ inputs.env }}"
        APP="${{ inputs.app }}"
        FUNCTION="${{ inputs.function }}"
        REGION="${{ inputs['aws-region'] }}"
        
        # Backend config path
        ART_DIR="infrastructure/environment/${ENVIRONMENT}/backend"
        CONFIG_FILE="$ART_DIR/backend-config.json"
        mkdir -p "$ART_DIR"
        
        # Check if backend config exists and reuse bucket name for idempotency
        if [ -f "$CONFIG_FILE" ]; then
          BUCKET_NAME=$(jq -r '.bucket // empty' "$CONFIG_FILE")
        fi
        
        # Generate bucket name if not found: <function>-<4digit_random>
        if [ -z "${BUCKET_NAME:-}" ]; then
          RANDOM_SUFFIX=$(openssl rand -hex 2)
          BUCKET_NAME="${FUNCTION}-${RANDOM_SUFFIX}"
        fi
        
        TABLE_NAME="${BUCKET_NAME}-locks"
        KEY_PATH="${REPO_SHORT}/${PROJECT}/${ENVIRONMENT}/${APP}/terraform.tfstate"

        # Create bucket if it does not exist
        if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "Creating S3 bucket: $BUCKET_NAME in $REGION"
          if [ "$REGION" = "us-east-1" ]; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --acl private
          else
            aws s3api create-bucket --bucket "$BUCKET_NAME" --acl private --create-bucket-configuration LocationConstraint="$REGION"
          fi
          
          # Tag bucket
          aws s3api put-bucket-tagging --bucket "$BUCKET_NAME" --tagging 'TagSet=[
            {"Key":"Repo","Value":"'$REPO_SHORT'"},
            {"Key":"Project","Value":"'$PROJECT'"},
            {"Key":"Environment","Value":"'$ENVIRONMENT'"},
            {"Key":"App","Value":"'$APP'"},
            {"Key":"Function","Value":"'$FUNCTION'"}
          ]'
        else
          echo "S3 bucket already exists: $BUCKET_NAME"
        fi

        # Enable versioning and server-side encryption (SSE-S3)
        aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
        aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'

        # Add basic lifecycle (expire incomplete multipart uploads)
        aws s3api put-bucket-lifecycle-configuration --bucket "$BUCKET_NAME" --lifecycle-configuration '{"Rules":[{"Status":"Enabled","Filter":{},"AbortIncompleteMultipartUpload":{"DaysAfterInitiation":7},"ID":"cleanup-mpu"}]}' || true

        # Ensure DynamoDB lock table exists
        if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
          echo "Creating DynamoDB table: $TABLE_NAME"
          aws dynamodb create-table \
            --table-name "$TABLE_NAME" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --tags 'Key=Repo,Value='$REPO_SHORT' Key=Project,Value='$PROJECT' Key=Environment,Value='$ENVIRONMENT' Key=App,Value='$APP' Key=Function,Value='$FUNCTION >/dev/null
          aws dynamodb wait table-exists --table-name "$TABLE_NAME"
        else
          echo "DynamoDB table already exists: $TABLE_NAME"
        fi

        # Write backend config JSON
        cat >"$CONFIG_FILE" <<JSON
{
  "bucket": "$BUCKET_NAME",
  "key": "$KEY_PATH",
  "region": "$REGION",
  "dynamodb_table": "$TABLE_NAME"
}
JSON
        echo "Backend config written to $CONFIG_FILE:"
        cat "$CONFIG_FILE"

    # Azure path: create RG, Storage Account, Container, and Table, then write backend-config.json
    - name: Provision Azure backend (Storage + Table)
      if: ${{ inputs.cloud == 'azure' }}
      shell: bash
      run: |
        set -euo pipefail
        ENV="${{ inputs.env }}"
        LOCATION="${{ inputs['azure-region'] }}"
        PROJECT="${{ inputs['project-name'] }}"
        RG_NAME="${PROJECT}-tfstate-${ENV}"
        SA_NAME="tfstate${ENV}"
        CONTAINER="tfstate"
        TABLE="tf-locks"

        # Ensure Resource Group
        az group create -n "$RG_NAME" -l "$LOCATION" -o none

        # Ensure Storage Account (must be globally unique; using a simple pattern may conflict in rare cases)
        if ! az storage account show -g "$RG_NAME" -n "$SA_NAME" -o none 2>/dev/null; then
          az storage account create -g "$RG_NAME" -n "$SA_NAME" -l "$LOCATION" --sku Standard_LRS --kind StorageV2 --allow-blob-public-access false -o none
        fi

        # Ensure Container and Table using login-based auth
        az storage container create --name "$CONTAINER" --account-name "$SA_NAME" --auth-mode login -o none
        az storage table create --name "$TABLE" --account-name "$SA_NAME" --auth-mode login -o none

        SUBSCRIPTION_ID=$(az account show --query id -o tsv)

        ART_DIR="infrastructure/environment/${ENV}/backend"
        mkdir -p "$ART_DIR"
        cat >"$ART_DIR/backend-config.json" <<JSON
{
  "resource_group_name": "$ORG_NAME",
  "storage_account_name": "$SA_NAME",
  "container_name": "$CONTAINER",
  "key": "${ENV}/terraform.tfstate",
  "subscription_id": "$SUBSCRIPTION_ID"
}
JSON
        cat "$ART_DIR/backend-config.json"

