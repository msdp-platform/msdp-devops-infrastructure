name: "Terraform Backend (AWS)"
description: "Creates/ensures Terraform S3 state bucket and DynamoDB lock table, and writes backend-config.json."

inputs:
  repo-shortname:
    description: "Shortname of the repository (e.g., infra)"
    required: true
  project:
    description: "Project name (e.g., msdp)"
    required: true
  env:
    description: "Environment (e.g., dev, sit, prod)"
    required: true
  app:
    description: "Application/workload name (e.g., crossplane)"
    required: true
  function:
    description: "Function for bucket grouping (e.g., tfstate)"
    required: true
  cloud:
    description: "Target cloud; only 'aws' is supported for now"
    required: true
  aws-region:
    description: "AWS region for the backend"
    required: false
    default: "eu-west-1"

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        set -euo pipefail
        if [[ "${{ inputs.cloud }}" != "aws" ]]; then
          echo "ERROR: Only cloud=aws is supported at this time." >&2
          exit 1
        fi
        for v in repo-shortname project env app function; do
          : # no-op
        done

    - name: Prepare paths and vars
      shell: bash
      run: |
        set -euo pipefail
        BACKEND_DIR="infrastructure/environment/${{ inputs.env }}/backend"
        mkdir -p "$BACKEND_DIR"
        echo "BACKEND_DIR=$BACKEND_DIR" >> "$GITHUB_ENV"
        echo "CFG=$BACKEND_DIR/backend-config.json" >> "$GITHUB_ENV"

        # Compose key path (logical hierarchy)
        KEY="${{ inputs.repo-shortname }}/${{ inputs.project }}/${{ inputs.env }}/${{ inputs.app }}/terraform.tfstate"
        echo "KEY=$KEY" >> "$GITHUB_ENV"

    - name: Determine or generate bucket name
      shell: bash
      run: |
        set -euo pipefail
        if [[ -f "$CFG" ]]; then
          BUCKET="$(jq -r '.bucket // empty' "$CFG" || true)"
        else
          BUCKET=""
        fi

        if [[ -z "${BUCKET:-}" || "${BUCKET}" == "null" ]]; then
          RAND=$(printf "%04d" $((RANDOM % 10000)))
          # normalize function to lowercase and safe chars
          FN="$(echo "${{ inputs.function }}" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g')"
          BUCKET="${FN}-${RAND}"
        fi

        # Basic length/syntax guard
        if [[ ${#BUCKET} -gt 63 ]]; then
          echo "ERROR: Bucket name too long: $BUCKET" >&2
          exit 1
        fi
        echo "BUCKET=$BUCKET" >> "$GITHUB_ENV"
        echo "TABLE=${BUCKET}-locks" >> "$GITHUB_ENV"

    - name: Ensure S3 bucket exists
      shell: bash
      run: |
        set -euo pipefail
        set +e
        aws s3api head-bucket --bucket "$BUCKET" >/dev/null 2>&1
        EXISTS=$?
        set -e
        if [[ $EXISTS -ne 0 ]]; then
          aws s3api create-bucket --bucket "$BUCKET" --region "${{ inputs.aws-region }}" \
            --create-bucket-configuration LocationConstraint="${{ inputs.aws-region }}"
        fi

    - name: Configure bucket (versioning, encryption, tags)
      shell: bash
      run: |
        set -euo pipefail
        aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
        aws s3api put-bucket-encryption --bucket "$BUCKET" --server-side-encryption-configuration '{
          "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
        }'
        aws s3api put-bucket-tagging --bucket "$BUCKET" --tagging "TagSet=[
          {\"Key\":\"Repo\",\"Value\":\"${{ inputs.repo-shortname }}\"},
          {\"Key\":\"Project\",\"Value\":\"${{ inputs.project }}\"},
          {\"Key\":\"Env\",\"Value\":\"${{ inputs.env }}\"},
          {\"Key\":\"App\",\"Value\":\"${{ inputs.app }}\"},
          {\"Key\":\"Function\",\"Value\":\"${{ inputs.function }}\"}
        ]"

    - name: Ensure DynamoDB lock table
      shell: bash
      run: |
        set -euo pipefail
        set +e
        aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1
        EXISTS=$?
        set -e
        if [[ $EXISTS -ne 0 ]]; then
          aws dynamodb create-table \
            --table-name "$TABLE" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        fi

    - name: Write backend-config.json
      shell: bash
      run: |
        set -euo pipefail
        jq -n --arg bucket "$BUCKET" \
              --arg key "$KEY" \
              --arg region "${{ inputs.aws-region }}" \
              --arg table "$TABLE" \
              '{bucket:$bucket, key:$key, region:$region, dynamodb_table:$table}' > "$CFG"
        echo "Wrote $CFG"
        cat "$CFG"

    - name: Summary
      shell: bash
      run: |
        set -euo pipefail
        echo "Backend summary:"
        echo "  Bucket: $BUCKET"
        aws s3api get-bucket-versioning --bucket "$BUCKET" --query 'Status'
        aws s3api get-bucket-encryption --bucket "$BUCKET" \
          --query 'ServerSideEncryptionConfiguration.Rules[*].ApplyServerSideEncryptionByDefault.SSEAlgorithm'
        echo "  Lock Table: $TABLE"
        aws dynamodb describe-table --table-name "$TABLE" --query '{Status:Table.TableStatus,Key:Table.KeySchema}'
