name: "Docker Build and Push"
description: "Composite action to build and push Docker images to GHCR, ECR, or ACR, with optional OIDC cloud login and caching."

inputs:
  registry:
    description: "Registry provider: ghcr | ecr | acr"
    required: true
  repository:
    description: "Repository path/name. For GHCR include org/repo or repo under owner; for ECR/ACR, the repo path under the registry"
    required: true
  context:
    description: "Docker build context"
    required: false
    default: .
  file:
    description: "Dockerfile path"
    required: false
    default: ./Dockerfile
  platforms:
    description: "Target platforms (comma-separated for buildx)"
    required: false
    default: linux/amd64
  push:
    description: "Push built image to registry"
    required: false
    default: "true"
  tags:
    description: "Additional tags (comma-separated, e.g., latest,dev)"
    required: false
    default: ""
  labels:
    description: "Additional labels (newline or comma-separated key=value)"
    required: false
    default: ""
  cache:
    description: "Enable Buildx GHA cache"
    required: false
    default: "true"
  use_cloud_login:
    description: "Use reusable cloud OIDC login (AWS/Azure)"
    required: false
    default: "false"
  aws_region:
    description: "AWS region (if registry=ecr and using cloud login)"
    required: false
    default: eu-west-1
  acr_name:
    description: "Azure Container Registry name (e.g., myacr)"
    required: false
    default: ""
  aws_role_arn:
    description: "AWS role to assume for ECR (used when use_cloud_login=true)"
    required: false
    default: ""
  azure_client_id:
    description: "Azure Client ID (used when use_cloud_login=true and/or ACR)"
    required: false
    default: ""
  azure_tenant_id:
    description: "Azure Tenant ID (used when use_cloud_login=true and/or ACR)"
    required: false
    default: ""
  azure_subscription_id:
    description: "Azure Subscription ID (used when use_cloud_login=true and/or ACR)"
    required: false
    default: ""

outputs:
  image:
    description: "Resolved image reference (registry + repository)"
    value: ${{ steps.resolve.outputs.image }}
  tags:
    description: "Final tags generated by metadata-action"
    value: ${{ steps.meta.outputs.tags }}

runs:
  using: "composite"
  steps:
    - name: Optional Cloud Login (OIDC)
      if: ${{ inputs.use_cloud_login == 'true' }}
      uses: ./.github/actions/cloud-login
      with:
        aws-role-arn: ${{ inputs.aws_role_arn }}
        aws-region: ${{ inputs.aws_region }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-subscription-id: ${{ inputs.azure_subscription_id }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Resolve base image
      id: resolve
      shell: bash
      run: |
        set -euo pipefail
        REGISTRY="${{ inputs.registry }}"
        REPO="${{ inputs.repository }}"
        OWNER_LOWER=$(echo -n "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')
        case "$REGISTRY" in
          ghcr)
            IMAGE="ghcr.io/${OWNER_LOWER}/$REPO"
            ;;
          ecr)
            # Resolved after ECR login step
            IMAGE="$REPO"
            ;;
          acr)
            if [ -z "${{ inputs.acr_name }}" ]; then
              echo "acr_name input is required when registry=acr" >&2
              exit 1
            fi
            IMAGE="${{ inputs.acr_name }}.azurecr.io/$REPO"
            ;;
          *)
            echo "Unsupported registry: $REGISTRY (expected ghcr|ecr|acr)" >&2
            exit 1
            ;;
        esac
        echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

    - name: Login to GHCR
      if: ${{ inputs.registry == 'ghcr' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Login to ECR
      id: ecr-login
      if: ${{ inputs.registry == 'ecr' }}
      uses: aws-actions/amazon-ecr-login@v2

    - name: Compute ECR image
      if: ${{ inputs.registry == 'ecr' }}
      id: ecr-image
      shell: bash
      run: |
        set -euo pipefail
        REG="${{ steps.ecr-login.outputs.registry }}"
        IMG="${REG}/${{ inputs.repository }}"
        echo "image=$IMG" >> "$GITHUB_OUTPUT"

    - name: Login to ACR (via az)
      if: ${{ inputs.registry == 'acr' }}
      shell: bash
      run: |
        set -euo pipefail
        az acr login -n "${{ inputs.acr_name }}"

    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.ecr-image.outputs.image || steps.resolve.outputs.image }}
        tags: |
          type=sha
          type=ref,event=branch
          ${{ inputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.run_id }}
          ${{ inputs.labels }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ inputs.cache == 'true' && 'type=gha' || '' }}
        cache-to: ${{ inputs.cache == 'true' && 'type=gha,mode=max' || '' }}

