name: "Enhanced Terraform Backend"
description: "Creates Terraform backend using organizational naming conventions and standards"

inputs:
  environment:
    description: "Environment (dev, staging, prod, sandbox)"
    required: true
  platform:
    description: "Platform (azure, aws, shared)"
    required: true
  component:
    description: "Component (network, aks, eks, etc.)"
    required: true
  instance:
    description: "Instance identifier (optional, for multiple instances)"
    required: false
  aws_region:
    description: "AWS region override (optional)"
    required: false
  create_resources:
    description: "Create S3 bucket and DynamoDB table if they don't exist"
    required: false
    default: "true"

outputs:
  backend_config_file:
    description: "Path to generated backend config file"
    value: ${{ steps.generate.outputs.config_file }}
  bucket_name:
    description: "S3 bucket name"
    value: ${{ steps.generate.outputs.bucket_name }}
  state_key:
    description: "Terraform state key"
    value: ${{ steps.generate.outputs.state_key }}
  pipeline_name:
    description: "Pipeline name for identification"
    value: ${{ steps.generate.outputs.pipeline_name }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.environment }}" ]]; then
          echo "Error: environment input is required"
          exit 1
        fi
        if [[ -z "${{ inputs.platform }}" ]]; then
          echo "Error: platform input is required"
          exit 1
        fi
        if [[ -z "${{ inputs.component }}" ]]; then
          echo "Error: component input is required"
          exit 1
        fi

    - name: Install Python dependencies
      shell: bash
      run: |
        if ! python3 -c "import yaml" 2>/dev/null; then
          echo "Installing PyYAML..."
          pip3 install PyYAML
        fi

    - name: Generate backend configuration
      id: generate
      shell: bash
      run: |
        set -euo pipefail
        
        # Build command arguments
        ARGS=("${{ inputs.environment }}" "${{ inputs.platform }}" "${{ inputs.component }}")
        if [[ -n "${{ inputs.instance }}" ]]; then
          ARGS+=("${{ inputs.instance }}")
        fi
        
        echo "Generating backend configuration..."
        echo "Environment: ${{ inputs.environment }}"
        echo "Platform: ${{ inputs.platform }}"
        echo "Component: ${{ inputs.component }}"
        if [[ -n "${{ inputs.instance }}" ]]; then
          echo "Instance: ${{ inputs.instance }}"
        fi
        
        # Generate backend config
        python3 scripts/generate-backend-config.py "${ARGS[@]}" > backend-config.json
        
        # Extract values for outputs and validation
        BUCKET=$(jq -r '.bucket' backend-config.json)
        KEY=$(jq -r '.key' backend-config.json)
        REGION=$(jq -r '.region' backend-config.json)
        TABLE=$(jq -r '.dynamodb_table' backend-config.json)
        PIPELINE_NAME=$(jq -r '.pipeline_name' backend-config.json)
        
        # Override region if provided
        if [[ -n "${{ inputs.aws_region }}" ]]; then
          REGION="${{ inputs.aws_region }}"
          jq --arg region "$REGION" '.region = $region' backend-config.json > backend-config-updated.json
          mv backend-config-updated.json backend-config.json
        fi
        
        # Create backend directory structure
        BACKEND_DIR="infrastructure/environment/${{ inputs.environment }}/backend"
        mkdir -p "$BACKEND_DIR"
        
        # Save config file with descriptive name
        CONFIG_FILE="$BACKEND_DIR/backend-config-${{ inputs.platform }}-${{ inputs.component }}"
        if [[ -n "${{ inputs.instance }}" ]]; then
          CONFIG_FILE="${CONFIG_FILE}-${{ inputs.instance }}"
        fi
        CONFIG_FILE="${CONFIG_FILE}.json"
        
        cp backend-config.json "$CONFIG_FILE"
        
        # Set outputs
        echo "config_file=$CONFIG_FILE" >> $GITHUB_OUTPUT
        echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT
        echo "state_key=$KEY" >> $GITHUB_OUTPUT
        echo "pipeline_name=$PIPELINE_NAME" >> $GITHUB_OUTPUT
        
        # Set environment variables for subsequent steps
        echo "TF_BACKEND_CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "TF_BACKEND_BUCKET=$BUCKET" >> $GITHUB_ENV
        echo "TF_BACKEND_KEY=$KEY" >> $GITHUB_ENV
        echo "TF_BACKEND_REGION=$REGION" >> $GITHUB_ENV
        echo "TF_BACKEND_TABLE=$TABLE" >> $GITHUB_ENV
        
        echo "Generated backend configuration:"
        cat "$CONFIG_FILE" | jq .

    - name: Ensure S3 bucket exists
      if: ${{ inputs.create_resources == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        
        BUCKET="${{ steps.generate.outputs.bucket_name }}"
        REGION=$(jq -r '.region' "${{ steps.generate.outputs.config_file }}")
        
        echo "Ensuring S3 bucket exists: $BUCKET"
        
        # Check if bucket exists
        if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
          echo "✅ S3 bucket already exists: $BUCKET"
        else
          echo "Creating S3 bucket: $BUCKET in region $REGION"
          
          # Create bucket with appropriate configuration for region
          if [ "$REGION" = "us-east-1" ]; then
            aws s3api create-bucket --bucket "$BUCKET"
          else
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          fi
          
          # Wait for bucket to be available
          aws s3api wait bucket-exists --bucket "$BUCKET"
          
          echo "✅ S3 bucket created successfully: $BUCKET"
        fi
        
        # Configure bucket security settings
        echo "Configuring bucket security settings..."
        
        # Enable versioning
        aws s3api put-bucket-versioning \
          --bucket "$BUCKET" \
          --versioning-configuration Status=Enabled
        
        # Enable server-side encryption
        aws s3api put-bucket-encryption \
          --bucket "$BUCKET" \
          --server-side-encryption-configuration \
          '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"},"BucketKeyEnabled":true}]}'
        
        # Block public access
        aws s3api put-public-access-block \
          --bucket "$BUCKET" \
          --public-access-block-configuration \
          "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
        
        # Add bucket tags
        aws s3api put-bucket-tagging \
          --bucket "$BUCKET" \
          --tagging 'TagSet=[
            {Key=Purpose,Value=TerraformState},
            {Key=Environment,Value=${{ inputs.environment }}},
            {Key=Platform,Value=${{ inputs.platform }}},
            {Key=ManagedBy,Value=GitHubActions},
            {Key=Organization,Value=msdp}
          ]'
        
        echo "✅ S3 bucket security configured"

    - name: Ensure DynamoDB table exists
      if: ${{ inputs.create_resources == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        
        TABLE=$(jq -r '.dynamodb_table' "${{ steps.generate.outputs.config_file }}")
        REGION=$(jq -r '.region' "${{ steps.generate.outputs.config_file }}")
        
        echo "Ensuring DynamoDB table exists: $TABLE"
        
        # Check if table exists
        if aws dynamodb describe-table --table-name "$TABLE" --region "$REGION" 2>/dev/null; then
          echo "✅ DynamoDB table already exists: $TABLE"
        else
          echo "Creating DynamoDB table: $TABLE in region $REGION"
          
          # Create table
          aws dynamodb create-table \
            --table-name "$TABLE" \
            --region "$REGION" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --tags Key=Purpose,Value=TerraformLocking \
                  Key=Environment,Value=${{ inputs.environment }} \
                  Key=ManagedBy,Value=GitHubActions \
                  Key=Organization,Value=msdp
          
          # Wait for table to be active
          echo "Waiting for table to become active..."
          aws dynamodb wait table-exists --table-name "$TABLE" --region "$REGION"
          
          echo "✅ DynamoDB table created successfully: $TABLE"
        fi
        
        # Enable point-in-time recovery if supported
        echo "Enabling point-in-time recovery..."
        aws dynamodb update-continuous-backups \
          --table-name "$TABLE" \
          --region "$REGION" \
          --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true \
          2>/dev/null || echo "⚠️  Point-in-time recovery not available or already enabled"
        
        echo "✅ DynamoDB table configured"

    - name: Validate backend configuration
      shell: bash
      run: |
        set -euo pipefail
        
        CONFIG_FILE="${{ steps.generate.outputs.config_file }}"
        BUCKET="${{ steps.generate.outputs.bucket_name }}"
        TABLE=$(jq -r '.dynamodb_table' "$CONFIG_FILE")
        REGION=$(jq -r '.region' "$CONFIG_FILE")
        
        echo "=== Backend Configuration Summary ==="
        echo "Config File: $CONFIG_FILE"
        echo "S3 Bucket: $BUCKET"
        echo "DynamoDB Table: $TABLE"
        echo "AWS Region: $REGION"
        echo "State Key: ${{ steps.generate.outputs.state_key }}"
        echo "Pipeline Name: ${{ steps.generate.outputs.pipeline_name }}"
        
        # Verify access to resources
        if [[ "${{ inputs.create_resources }}" == "true" ]]; then
          echo ""
          echo "=== Verifying Resource Access ==="
          
          # Test S3 access
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "✅ S3 bucket accessible: $BUCKET"
          else
            echo "❌ S3 bucket not accessible: $BUCKET"
            exit 1
          fi
          
          # Test DynamoDB access
          if aws dynamodb describe-table --table-name "$TABLE" --region "$REGION" >/dev/null 2>&1; then
            echo "✅ DynamoDB table accessible: $TABLE"
          else
            echo "❌ DynamoDB table not accessible: $TABLE"
            exit 1
          fi
        fi
        
        echo ""
        echo "✅ Backend configuration validation completed successfully"