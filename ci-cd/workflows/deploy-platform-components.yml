name: Deploy Platform Components

on:
  push:
    branches: [dev, test, prod]
    paths:
      - "infrastructure/platforms/**"
      - "ci-cd/workflows/deploy-platform-components.yml"
  pull_request:
    branches: [dev, test, prod]
    paths:
      - "infrastructure/platforms/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod
      component:
        description: "Platform component to deploy"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - networking
          - monitoring
      dry_run:
        description: "Perform dry run"
        required: false
        default: false
        type: boolean

env:
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      component: ${{ steps.detect.outputs.component }}
      dry_run: ${{ steps.detect.outputs.dry_run }}
    steps:
      - name: Detect Environment
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "component=${{ github.event.inputs.component }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "component=all" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
          fi

  validate-platform-components:
    runs-on: ubuntu-latest
    needs: detect-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate YAML files
        run: |
          echo "üîç Validating YAML files..."
          find infrastructure/platforms -name "*.yaml" -exec yamllint {} \;

      - name: Validate Kustomize configurations
        run: |
          echo "üîç Validating Kustomize configurations..."
          find infrastructure/platforms -name "kustomization.yaml" -exec kustomize build {} \; > /dev/null

      - name: Validate Helm values
        run: |
          echo "üîç Validating Helm values..."
          find infrastructure/platforms -name "helm-values.yaml" -exec helm template test . -f {} \; > /dev/null

  deploy-networking:
    runs-on: ubuntu-latest
    needs: [detect-environment, validate-platform-components]
    if: needs.detect-environment.outputs.component == 'all' || needs.detect-environment.outputs.component == 'networking'
    environment: ${{ needs.detect-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Setup Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_REGION }}

      - name: Get AKS credentials
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          RESOURCE_GROUP="msdp-${ENVIRONMENT}-rg"
          CLUSTER_NAME="msdp-${ENVIRONMENT}-aks"
          
          echo "üîê Getting AKS credentials for ${CLUSTER_NAME}..."
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing

      - name: Deploy NGINX Ingress Controller
        run: |
          echo "üåê Deploying NGINX Ingress Controller..."
          if [ "${{ needs.detect-environment.outputs.dry_run }}" = "true" ]; then
            kustomize build infrastructure/platforms/networking/nginx-ingress/ | kubectl apply --dry-run=client -f -
          else
            kubectl apply -k infrastructure/platforms/networking/nginx-ingress/
          fi

      - name: Wait for NGINX Ingress Controller
        if: needs.detect-environment.outputs.dry_run != 'true'
        run: |
          echo "‚è≥ Waiting for NGINX Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Deploy Cert-Manager
        run: |
          echo "üîí Deploying Cert-Manager..."
          if [ "${{ needs.detect-environment.outputs.dry_run }}" = "true" ]; then
            kustomize build infrastructure/platforms/networking/cert-manager/ | kubectl apply --dry-run=client -f -
          else
            kubectl apply -k infrastructure/platforms/networking/cert-manager/
          fi

      - name: Wait for Cert-Manager
        if: needs.detect-environment.outputs.dry_run != 'true'
        run: |
          echo "‚è≥ Waiting for Cert-Manager to be ready..."
          kubectl wait --namespace cert-manager \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Deploy External DNS
        run: |
          echo "üåç Deploying External DNS..."
          if [ "${{ needs.detect-environment.outputs.dry_run }}" = "true" ]; then
            kustomize build infrastructure/platforms/networking/external-dns/ | kubectl apply --dry-run=client -f -
          else
            kubectl apply -k infrastructure/platforms/networking/external-dns/
          fi

      - name: Wait for External DNS
        if: needs.detect-environment.outputs.dry_run != 'true'
        run: |
          echo "‚è≥ Waiting for External DNS to be ready..."
          kubectl wait --namespace external-dns \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=external-dns \
            --timeout=300s

      - name: Verify Platform Components
        if: needs.detect-environment.outputs.dry_run != 'true'
        run: |
          echo "‚úÖ Verifying platform components..."
          
          echo "üìä NGINX Ingress Controller status:"
          kubectl get pods -n ingress-nginx
          
          echo "üìä Cert-Manager status:"
          kubectl get pods -n cert-manager
          kubectl get clusterissuer
          
          echo "üìä External DNS status:"
          kubectl get pods -n external-dns

  deploy-monitoring:
    runs-on: ubuntu-latest
    needs: [detect-environment, validate-platform-components]
    if: needs.detect-environment.outputs.component == 'all' || needs.detect-environment.outputs.component == 'monitoring'
    environment: ${{ needs.detect-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Setup Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Get AKS credentials
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          RESOURCE_GROUP="msdp-${ENVIRONMENT}-rg"
          CLUSTER_NAME="msdp-${ENVIRONMENT}-aks"
          
          echo "üîê Getting AKS credentials for ${CLUSTER_NAME}..."
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing

      - name: Deploy Monitoring Components
        run: |
          echo "üìä Deploying monitoring components..."
          if [ "${{ needs.detect-environment.outputs.dry_run }}" = "true" ]; then
            echo "üîç Dry run mode - monitoring components would be deployed"
          else
            echo "üìä Monitoring components deployment (to be implemented)"
            # TODO: Add monitoring components deployment when available
          fi

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [detect-environment, deploy-networking, deploy-monitoring]
    if: always()
    steps:
      - name: Notify Deployment Status
        run: |
          ENVIRONMENT="${{ needs.detect-environment.outputs.environment }}"
          COMPONENT="${{ needs.detect-environment.outputs.component }}"
          
          if [ "${{ needs.deploy-networking.result }}" = "success" ] && [ "${{ needs.deploy-monitoring.result }}" = "success" ]; then
            echo "‚úÖ Platform components deployed successfully to ${ENVIRONMENT} environment"
            echo "üåê Components deployed: ${COMPONENT}"
          else
            echo "‚ùå Platform components deployment failed to ${ENVIRONMENT} environment"
            echo "üîç Check the logs for details"
            exit 1
          fi
