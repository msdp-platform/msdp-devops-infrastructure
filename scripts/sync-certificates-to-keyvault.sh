#!/bin/bash

# Certificate Sync to Azure Key Vault Script
# Syncs cert-manager generated certificates to Azure Key Vault

set -euo pipefail

ENVIRONMENT="${1:-dev}"
KEY_VAULT_NAME="${2:-msdp-certificates-kv}"
CERTIFICATE_DIR="${3:-/tmp/certificate-management}"

if [ -z "$ENVIRONMENT" ]; then
    echo "Usage: $0 <environment> [key_vault_name] [certificate_dir]"
    echo "Example: $0 dev msdp-certificates-kv /tmp/certificate-management"
    exit 1
fi

echo "üîÑ Syncing certificates to Azure Key Vault: $KEY_VAULT_NAME"

# Check if certificate files exist
if [ ! -d "$CERTIFICATE_DIR" ]; then
    echo "‚ùå Certificate directory not found: $CERTIFICATE_DIR"
    exit 1
fi

# Find all ExternalSecret files
EXTERNAL_SECRET_FILES=$(find "$CERTIFICATE_DIR" -name "*-externalsecret.yaml" -type f)

for externalsecret_file in $EXTERNAL_SECRET_FILES; do
    echo "üîç Processing: $externalsecret_file"
    
    # Extract certificate information
    secret_name=$(yq eval '.metadata.name' "$externalsecret_file" 2>/dev/null || echo "")
    namespace=$(yq eval '.metadata.namespace' "$externalsecret_file" 2>/dev/null || echo "")
    
    if [ -z "$secret_name" ] || [ -z "$namespace" ]; then
        echo "‚ö†Ô∏è Skipping invalid ExternalSecret file: $externalsecret_file"
        continue
    fi
    
    # Extract component name from secret name (remove -tls suffix)
    component_name=$(echo "$secret_name" | sed 's/-tls$//')
    cert_key="${ENVIRONMENT}-${component_name}-tls"
    key_key="${ENVIRONMENT}-${component_name}-key"
    
    echo "üìã Syncing certificate for: $component_name in namespace $namespace"
    echo "  - Secret name: $secret_name"
    echo "  - Cert key: $cert_key"
    echo "  - Key key: $key_key"
    
    # Check if Kubernetes secret exists
    if kubectl get secret "$secret_name" -n "$namespace" >/dev/null 2>&1; then
        echo "‚úÖ Kubernetes secret exists: $secret_name"
        
        # Extract certificate and private key
        CERT_DATA=$(kubectl get secret "$secret_name" -n "$namespace" -o jsonpath='{.data.tls\.crt}' | base64 -d)
        KEY_DATA=$(kubectl get secret "$secret_name" -n "$namespace" -o jsonpath='{.data.tls\.key}' | base64 -d)
        
        # Store certificate in Key Vault
        echo "$CERT_DATA" | az keyvault secret set --vault-name "$KEY_VAULT_NAME" --name "$cert_key" --file /dev/stdin >/dev/null
        echo "‚úÖ Certificate stored in Key Vault: $cert_key"
        
        # Store private key in Key Vault
        echo "$KEY_DATA" | az keyvault secret set --vault-name "$KEY_VAULT_NAME" --name "$key_key" --file /dev/stdin >/dev/null
        echo "‚úÖ Private key stored in Key Vault: $key_key"
    else
        echo "‚ùå Kubernetes secret not found: $secret_name"
        echo "üîß Certificate will be generated by cert-manager first"
    fi
done

echo "‚úÖ Certificate sync to Key Vault complete"
