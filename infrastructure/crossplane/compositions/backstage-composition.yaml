apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: backstage-infrastructure
  labels:
    provider: azure
    service: backstage
    environment: "{{ .environment }}"
    business-unit: "{{ .businessUnit }}"
    country: "{{ .country }}"
spec:
  writeConnectionSecretsToRef:
    name: "backstage-{{ .environment }}-{{ .businessUnit }}-{{ .country }}-secrets"
    namespace: crossplane-system
  compositeTypeRef:
    apiVersion: msdp.io/v1alpha1
    kind: XBackstageInfrastructure
  resources:
    # PostgreSQL Database
    - name: postgres-server
      base:
        apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
        kind: FlexibleServer
        spec:
          forProvider:
            location: "{{ .location }}"
            resourceGroupName: "{{ .resourceGroupName }}"
            administratorLogin: "{{ .postgresAdminUser }}"
            administratorPasswordSecretRef:
              name: "{{ .postgresPasswordSecret }}"
              key: password
              namespace: crossplane-system
            skuName: "{{ .postgresSku }}"
            version: "{{ .postgresVersion }}"
            storageMb: "{{ .postgresStorageMb }}"
            backupRetentionDays: "{{ .postgresBackupRetentionDays }}"
            geoRedundantBackupEnabled: "{{ .postgresGeoRedundantBackup }}"
            tags:
              Environment: "{{ .environment }}"
              BusinessUnit: "{{ .businessUnit }}"
              Country: "{{ .country }}"
              Service: backstage
              ManagedBy: crossplane
    # PostgreSQL Database
    - name: postgres-database
      base:
        apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
        kind: FlexibleServerDatabase
        spec:
          forProvider:
            serverIdSelector:
              matchControllerRef: true
            charset: "{{ .postgresCharset }}"
            collation: "{{ .postgresCollation }}"
    # PostgreSQL Firewall Rule
    - name: postgres-firewall-rule
      base:
        apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
        kind: FlexibleServerFirewallRule
        spec:
          forProvider:
            serverIdSelector:
              matchControllerRef: true
            startIpAddress: "{{ .postgresStartIp }}"
            endIpAddress: "{{ .postgresEndIp }}"
    # Storage Account for Static Assets
    - name: storage-account
      base:
        apiVersion: storage.azure.upbound.io/v1beta1
        kind: Account
        spec:
          forProvider:
            location: "{{ .location }}"
            resourceGroupName: "{{ .resourceGroupName }}"
            accountTier: "{{ .storageAccountTier }}"
            accountReplicationType: "{{ .storageAccountReplication }}"
            accountKind: "{{ .storageAccountKind }}"
            minTlsVersion: "{{ .storageMinTlsVersion }}"
            allowNestedItemsToBePublic: "{{ .storageAllowPublic }}"
            tags:
              Environment: "{{ .environment }}"
              BusinessUnit: "{{ .businessUnit }}"
              Country: "{{ .country }}"
              Service: backstage
              ManagedBy: crossplane
    # Storage Container for Backstage Files
    - name: storage-container
      base:
        apiVersion: storage.azure.upbound.io/v1beta1
        kind: Container
        spec:
          forProvider:
            storageAccountNameSelector:
              matchControllerRef: true
            containerAccessType: "{{ .storageContainerAccessType }}"
    # Key Vault for Secrets
    - name: key-vault
      base:
        apiVersion: keyvault.azure.upbound.io/v1beta1
        kind: Vault
        spec:
          forProvider:
            location: "{{ .location }}"
            resourceGroupName: "{{ .resourceGroupName }}"
            tenantId: "{{ .tenantId }}"
            skuName: "{{ .keyVaultSku }}"
            enabledForDiskEncryption: "{{ .keyVaultDiskEncryption }}"
            enabledForTemplateDeployment: "{{ .keyVaultTemplateDeployment }}"
            enableRbacAuthorization: "{{ .keyVaultRbacAuth }}"
            purgeProtectionEnabled: "{{ .keyVaultPurgeProtection }}"
            tags:
              Environment: "{{ .environment }}"
              BusinessUnit: "{{ .businessUnit }}"
              Country: "{{ .country }}"
              Service: backstage
              ManagedBy: crossplane
    # Application Insights for Monitoring
    - name: application-insights
      base:
        apiVersion: insights.azure.upbound.io/v1beta1
        kind: ApplicationInsights
        spec:
          forProvider:
            location: "{{ .location }}"
            resourceGroupName: "{{ .resourceGroupName }}"
            applicationType: "{{ .appInsightsType }}"
            retentionInDays: "{{ .appInsightsRetentionDays }}"
            dailyDataCapInGb: "{{ .appInsightsDailyDataCap }}"
            dailyDataCapNotificationsDisabled: "{{ .appInsightsDataCapNotificationsDisabled }}"
            tags:
              Environment: "{{ .environment }}"
              BusinessUnit: "{{ .businessUnit }}"
              Country: "{{ .country }}"
              Service: backstage
              ManagedBy: crossplane
