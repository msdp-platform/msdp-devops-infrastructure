# NGINX Ingress Controller Helm Values for Azure
# This file contains Azure-specific configuration for NGINX Ingress Controller

# Controller configuration
controller:
  # Image configuration
  image:
    repository: registry.k8s.io/ingress-nginx/controller
    tag: "v1.9.4"
    pullPolicy: IfNotPresent
  
  # Replica configuration
  replicaCount: ${REPLICA_COUNT:-2}
  
  # Resource configuration
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 101
    runAsGroup: 82
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: true
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  # Pod security context
  podSecurityContext:
    fsGroup: 82
  
  # Service configuration
  service:
    enabled: true
    type: ${SERVICE_TYPE:-LoadBalancer}
    
    # Azure-specific annotations
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/healthz"
      service.beta.kubernetes.io/azure-load-balancer-health-probe-port: "10254"
      service.beta.kubernetes.io/azure-load-balancer-health-probe-protocol: "http"
      service.beta.kubernetes.io/azure-load-balancer-health-probe-interval: "5"
      service.beta.kubernetes.io/azure-load-balancer-health-probe-num-of-probe: "2"
    
    # External traffic policy
    externalTrafficPolicy: Local
    
    # Ports configuration
    ports:
      http: 80
      https: 443
    
    targetPorts:
      http: http
      https: https
  
  # Ingress configuration
  ingressClassResource:
    name: nginx
    enabled: true
    default: true
    controllerValue: "k8s.io/ingress-nginx"
  
  # Configuration options
  config:
    # SSL configuration
    ssl-redirect: "${ENABLE_SSL_REDIRECT:-true}"
    force-ssl-redirect: "false"
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    
    # Performance tuning
    worker-processes: "auto"
    worker-connections: "16384"
    max-worker-connections: "16384"
    
    # Proxy configuration
    proxy-connect-timeout: "15"
    proxy-send-timeout: "600"
    proxy-read-timeout: "600"
    proxy-body-size: "1m"
    
    # Rate limiting
    rate-limit-rps: "0"
    
    # Logging
    log-format-escape-json: "true"
    log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}'
    
    # Custom headers
    add-headers: "nginx-ingress/custom-headers"
  
  # Metrics configuration
  metrics:
    enabled: true
    port: 10254
    
    serviceMonitor:
      enabled: false
      additionalLabels: {}
      namespace: ""
      namespaceSelector: {}
      scrapeInterval: 30s
      targetLabels: []
      relabelings: []
      metricRelabelings: []
  
  # Health checks
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  
  # Node selector and tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Pod annotations
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
  
  # Pod labels
  podLabels:
    app.kubernetes.io/managed-by: plugin-manager
    app.kubernetes.io/part-of: nginx-ingress
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    failurePolicy: Fail
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}
    
    service:
      annotations: {}
      externalIPs: []
      loadBalancerSourceRanges: []
      servicePort: 443
      type: ClusterIP
    
    createSecretJob:
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
        limits:
          cpu: 50m
          memory: 50Mi
    
    patchWebhookJob:
      resources:
        requests:
          cpu: 10m
          memory: 20Mi
        limits:
          cpu: 50m
          memory: 50Mi
  
  # Autoscaling
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Default backend (optional)
defaultBackend:
  enabled: false

# RBAC configuration
rbac:
  create: true
  scope: false

# Service account configuration
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policy
networkPolicy:
  enabled: false

# Custom headers ConfigMap
customHeaders:
  enabled: true
  data:
    X-Frame-Options: "SAMEORIGIN"
    X-Content-Type-Options: "nosniff"
    X-XSS-Protection: "1; mode=block"
    Referrer-Policy: "strict-origin-when-cross-origin"