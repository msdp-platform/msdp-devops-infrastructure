# Backstage Default Values Template
# This file provides default values for the Backstage Helm chart
# Variables are templated and will be replaced by Terraform

backstage:
  image:
    repository: backstage/backstage
    tag: "${backstage_version}"
    pullPolicy: IfNotPresent

  # App configuration will be provided via ConfigMap
  appConfig:
    configMapRef: "${config_map_name}"

  # Environment variables from secrets
  extraEnvVars:
    - name: GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: "${github_secret_name}"
          key: GITHUB_CLIENT_ID
    - name: GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: "${github_secret_name}"
          key: GITHUB_CLIENT_SECRET
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: "${github_secret_name}"
          key: GITHUB_TOKEN
    - name: POSTGRES_HOST
      valueFrom:
        secretKeyRef:
          name: "${postgres_secret_name}"
          key: POSTGRES_HOST
    - name: POSTGRES_PORT
      valueFrom:
        secretKeyRef:
          name: "${postgres_secret_name}"
          key: POSTGRES_PORT
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: "${postgres_secret_name}"
          key: POSTGRES_USER
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: "${postgres_secret_name}"
          key: POSTGRES_PASSWORD
    - name: POSTGRES_DB
      valueFrom:
        secretKeyRef:
          name: "${postgres_secret_name}"
          key: POSTGRES_DB

  # Resource configuration
  resources:
    requests:
      cpu: "${cpu_requests}"
      memory: "${memory_requests}"
    limits:
      cpu: "${cpu_limits}"
      memory: "${memory_limits}"

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001

  # Node selector
  nodeSelector:
    kubernetes.io/os: linux

  # Health checks
  livenessProbe:
    httpGet:
      path: /healthcheck
      port: 7007
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /healthcheck
      port: 7007
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1

# PostgreSQL configuration
postgresql:
  enabled: ${postgresql_enabled}
  auth:
    username: "${postgres_username}"
    password: "${postgres_password}"
    database: "${postgres_database}"
  primary:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "${storage_class}"

# Ingress configuration
ingress:
  enabled: ${ingress_enabled}
  className: "${ingress_class_name}"
  annotations: ${ingress_annotations}
  hosts:
    - host: "${hostname}"
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: "${tls_secret_name}"
      hosts:
        - "${hostname}"

# Service configuration
service:
  type: ClusterIP
  ports:
    backend:
      port: 7007
      targetPort: backend
      protocol: TCP
    frontend:
      port: 3000
      targetPort: frontend
      protocol: TCP

# Service account
serviceAccount:
  create: true
  name: backstage
  annotations:
    app.kubernetes.io/managed-by: terraform

# Pod security context
podSecurityContext:
  fsGroup: 1001

# Replica count
replicaCount: 1

# Update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1
