# ArgoCD Configuration
argocd:
  # Global configuration
  global:
    domain: "argocd.dev.aztech-msdp.com"
    imageRegistry: "quay.io/argoproj"

  # Server configuration
  server:
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "200m"
        memory: "512Mi"
      limits:
        cpu: "1000m"
        memory: "2Gi"

    # Service configuration
    service:
      type: ClusterIP
      port: 80
      target_port: 8080

    # Ingress configuration
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        external-dns.alpha.kubernetes.io/hostname: "argocd.dev.aztech-msdp.com"
      hosts:
        - argocd.dev.aztech-msdp.com
      tls:
        - secretName: argocd-tls
          hosts:
            - argocd.dev.aztech-msdp.com

    # Additional configuration
    config:
      url: "https://argocd.dev.aztech-msdp.com"
      application.instanceLabelKey: "argocd.argoproj.io/instance"
      oidc.config: |
        name: OIDC
        issuer: https://login.microsoftonline.com/a4474822-c84f-4bd1-bc35-baed17234c9f/v2.0
        clientId: 129dd1fb-3d94-4e10-b451-2b0dea64daee
        clientSecret: $oidc.clientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
        requestedIDTokenClaims: {"groups": {"essential": true}}

  # Application Controller configuration
  controller:
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

  # Repository Server configuration
  repoServer:
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"

  # ApplicationSet Controller configuration
  applicationSet:
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "512Mi"

  # Notifications Controller configuration
  notifications:
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "512Mi"

  # Redis configuration
  redis:
    replica_count: 1

    # Image configuration
    image:
      repository: redis
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "50m"
        memory: "64Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"

  # Dex configuration (for OIDC)
  dex:
    enabled: true
    replica_count: 1

    # Image configuration
    image:
      repository: argocd
      pullPolicy: IfNotPresent

    # Resource configuration
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "512Mi"

  # Service account
  serviceAccount:
    create: true
    annotations: {}

  # RBAC
  rbac:
    create: true

  # Node selector
  nodeSelector:
    kubernetes.io/os: linux

  # Tolerations
  tolerations: []

  # Affinity
  affinity: {}
