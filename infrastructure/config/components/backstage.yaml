# Backstage Configuration
backstage:
  # Basic configuration
  replica_count: 1

  # Image configuration
  image:
    repository: backstage/backstage
    pullPolicy: IfNotPresent

  # Resource configuration
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"

  # Service configuration
  service:
    type: ClusterIP
    port: 80
    target_port: 7007

  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      external-dns.alpha.kubernetes.io/hostname: "backstage.dev.aztech-msdp.com"
    hosts:
      - backstage.dev.aztech-msdp.com
    tls:
      - secretName: backstage-tls
        hosts:
          - backstage.dev.aztech-msdp.com

  # Environment variables
  env:
    - name: NODE_ENV
      value: "production"
    - name: POSTGRES_HOST
      value: "postgres"
    - name: POSTGRES_PORT
      value: "5432"
    - name: POSTGRES_USER
      value: "backstage"
    - name: POSTGRES_PASSWORD
      value: "backstage"
    - name: POSTGRES_DB
      value: "backstage"

  # Liveness probe
  livenessProbe:
    httpGet:
      path: /
      port: 7007
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Readiness probe
  readinessProbe:
    httpGet:
      path: /
      port: 7007
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Node selector
  nodeSelector:
    kubernetes.io/os: linux

  # Tolerations
  tolerations: []

  # Affinity
  affinity: {}

  # Pod annotations
  podAnnotations: {}

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  # Service account
  serviceAccount:
    create: true
    annotations: {}
