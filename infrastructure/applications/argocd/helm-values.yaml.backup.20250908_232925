# ArgoCD Helm Values
# Based on Artifact Hub: https://artifacthub.io/packages/helm/argo/argo-cd
# Chart Version: 6.0.0
# ArgoCD Version: v3.1.4

# Global configuration
global:
  imageRegistry: ""

# ArgoCD configuration
argo-cd:
  # Image configuration
  image:
    repository: quay.io/argoproj/argocd
    tag: "v3.1.4"
    pullPolicy: IfNotPresent

  # Server configuration
  server:
    # Service configuration
    service:
      type: ClusterIP
      port: 80
      targetPort: 8080
    
    # Ingress configuration (disabled - using separate ingress.yaml)
    ingress:
      enabled: false

    # Additional server configuration
    extraArgs:
      - --insecure
      - --rootpath=/argocd

  # Application Controller configuration
  controller:
    # Resource limits
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi

  # Repository Server configuration
  repoServer:
    # Resource limits
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi

  # ApplicationSet Controller configuration
  applicationSet:
    # Resource limits
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi

  # Dex Server configuration (for SSO)
  dex:
    enabled: true
    # Resource limits
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Notifications Controller configuration
  notifications:
    enabled: true
    # Resource limits
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Redis configuration
  redis:
    # Resource limits
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Config configuration
  config:
    # Enable admin user
    admin.enabled: "true"
    
    # Application instance label key
    application.instanceLabelKey: "argocd.argoproj.io/instance"
    
    # Server configuration
    server.rbac.log.enforce.enable: "false"
    
    # Timeout configuration
    timeout.reconciliation: "180s"
    timeout.hard.reconciliation: "0s"
    
    # Exec configuration
    exec.enabled: "false"

  # RBAC configuration
  rbac:
    # Create RBAC resources
    create: true
    
    # Policy configuration
    policy.default: role:readonly
    policy.csv: |
      p, role:admin, applications, *, */*, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      p, role:admin, certificates, *, *, allow
      p, role:admin, projects, *, *, allow
      p, role:admin, accounts, *, *, allow
      p, role:admin, gpgkeys, *, *, allow
      p, role:admin, logs, *, *, allow
      p, role:admin, exec, *, *, allow
      p, role:admin, settings, *, *, allow
      p, role:admin, applicationsets, *, *, allow
      p, role:admin, appprojects, *, *, allow
      p, role:admin, certificates, *, *, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      p, role:admin, projects, *, *, allow
      p, role:admin, accounts, *, *, allow
      p, role:admin, gpgkeys, *, *, allow
      p, role:admin, logs, *, *, allow
      p, role:admin, exec, *, *, allow
      p, role:admin, settings, *, *, allow
      p, role:admin, applicationsets, *, *, allow
      p, role:admin, appprojects, *, *, allow
      g, argocd-admins, role:admin

  # Service Account configuration
  serviceAccount:
    create: true
    name: "argocd-application-controller"

  # Security Context configuration
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    fsGroup: 999

  # Pod Security Context configuration
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 999
    fsGroup: 999

  # Node Selector configuration
  nodeSelector: {}

  # Tolerations configuration
  tolerations: []

  # Affinity configuration
  affinity: {}

  # Pod Disruption Budget configuration
  controller:
    podDisruptionBudget:
      enabled: true
      minAvailable: 1

  # Metrics configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false  # Disable if Prometheus Operator not available

  # Network Policy configuration
  networkPolicy:
    enabled: false

  # Persistence configuration
  controller:
    persistence:
      enabled: true
      storageClassName: "default"
      accessMode: ReadWriteOnce
      size: 1Gi

  # HA configuration
  ha:
    enabled: false