# Simplified Backstage Configuration
# This replaces the complex multi-file structure with a single, clean configuration

# Global configuration
global:
  environment: "dev"
  businessUnit: "platform-core"
  country: "global"
  namespace: "backstage"

# Backstage application configuration
backstage:
  app:
    title: "MSDP Developer Portal"
    baseUrl: "https://backstage.{{ .Values.global.environment }}.aztech-msdp.com"
    organization:
      name: "MSDP Platform"
      logo: "/logo.png"

  # Database configuration (will be provided by Crossplane)
  database:
    client: pg
    connection:
      host: "backstage-postgres-{{ .Values.global.environment }}"
      port: 5432
      user: "backstage"
      password: "" # Will be injected from secrets
      database: "backstage"
      ssl: { rejectUnauthorized: false }

  # Authentication configuration
  auth:
    providers:
      github:
        development:
          clientId: "" # Will be injected from secrets
          clientSecret: "" # Will be injected from secrets
    session:
      secret: "" # Will be injected from secrets

  # Integrations
  integrations:
    github:
      - host: "github.com"
        token: "" # Will be injected from secrets
    argocd:
      - host: "argocd.{{ .Values.global.environment }}.aztech-msdp.com"
        username: "admin"
        password: "" # Will be injected from secrets

# Kubernetes deployment configuration
deployment:
  replicas: 1
  image:
    repository: "backstage/backstage"
    tag: "latest"
    pullPolicy: "IfNotPresent"

  resources:
    requests:
      memory: "256Mi"
      cpu: "125m"
    limits:
      memory: "512Mi"
      cpu: "250m"

  env:
    - name: "NODE_ENV"
      value: "production"
    - name: "BACKSTAGE_APP_TITLE"
      value: "{{ .Values.backstage.app.title }}"
    - name: "BACKSTAGE_APP_BASE_URL"
      value: "{{ .Values.backstage.app.baseUrl }}"

# Service configuration
service:
  type: "ClusterIP"
  port: 80
  targetPort: 7007

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: "backstage.{{ .Values.global.environment }}.aztech-msdp.com"
      paths:
        - path: "/"
          pathType: "Prefix"
  tls:
    - secretName: "backstage-{{ .Values.global.environment }}-tls"
      hosts:
        - "backstage.{{ .Values.global.environment }}.aztech-msdp.com"

# ConfigMap for Backstage configuration
configMap:
  enabled: true
  data:
    app-config.yaml: |
      app:
        title: "{{ .Values.backstage.app.title }}"
        baseUrl: "{{ .Values.backstage.app.baseUrl }}"
        organization:
          name: "{{ .Values.backstage.app.organization.name }}"
          logo: "{{ .Values.backstage.app.organization.logo }}"

      backend:
        baseUrl: "{{ .Values.backstage.app.baseUrl }}"
        cors:
          origin: "{{ .Values.backstage.app.baseUrl }}"
          methods: ["GET", "HEAD", "PATCH", "POST", "PUT", "DELETE"]
          credentials: true

      database:
        client: "{{ .Values.backstage.database.client }}"
        connection:
          host: "{{ .Values.backstage.database.connection.host }}"
          port: "{{ .Values.backstage.database.connection.port }}"
          user: "{{ .Values.backstage.database.connection.user }}"
          password: "{{ .Values.backstage.database.connection.password }}"
          database: "{{ .Values.backstage.database.connection.database }}"
          ssl: {{ .Values.backstage.database.connection.ssl | toJson }}

      auth:
        providers: {{ .Values.backstage.auth.providers | toJson }}
        session:
          secret: "{{ .Values.backstage.auth.session.secret }}"

      integrations:
        github: {{ .Values.backstage.integrations.github | toJson }}
        argocd: {{ .Values.backstage.integrations.argocd | toJson }}

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Pod Annotations
podAnnotations: {}

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Image Pull Secrets
imagePullSecrets: []

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    labels:
      app: backstage
    interval: "30s"
    scrapeTimeout: "10s"
    path: "/health"
    port: "http"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
